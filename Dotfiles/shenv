#!/usr/bin/env dash
# shellcheck disable=SC2088
# Sourced by `.zshenv` and `.bash_profile` (instead of `.profile`) to setup environment-variables
# like `$PATH`. (This is an ugly hack.)
#
# See: <https://kb.iu.edu/d/abdy>

#echo '~/.shenv: $SHENV_EVALUATED = '\'"$SHENV_EVALUATED"\'
if [ -n "$SHENV_EVALUATED" ]; then
   return 1
fi

SHENV_EVALUATED='true'

debug_path_dump() {
   if [ "$DEBUG_PATH" = 'true' ]; then
      echo "~/.shenv ($1): \$PATH = "
      echo "$PATH" | tr ':' "\n" | nl
   fi
}

debug_path() {
   if [ "$DEBUG_PATH" = 'true' ]; then
      echo "~/.shenv: $1"
   fi
}

debug_path_dump 'before'

# This sets '$SYSTEM', if it's been created
[ -r "$HOME/.shenv.local" ] && . "$HOME/.shenv.local"

export SYSTEM_OSX='Mac OS X'
export SYSTEM_MACOS='macOS'
export SYSTEM_TIGER='Mac OS X 10.4'
export SYSTEM_LEOPARD='Mac OS X 10.5'
export SYSTEM_SNOW_LEOPARD='Mac OS X 10.6'
export SYSTEM_LION='Mac OS X 10.7'
export SYSTEM_MOUNTAIN_LION='Mac OS X 10.8'
export SYSTEM_MAVERICKS='Mac OS X 10.9'
export SYSTEM_YOSEMITE='Mac OS X 10.10 "Yosemite"'
export SYSTEM_EL_CAPITAN='Mac OS X 10.11 "El Capitan"'
export SYSTEM_SIERRA='Mac OS X 10.12 "Sierra"'
export SYSTEM_HIGH_SIERRA='Mac OS X 10.13 "High Sierra"'
export SYSTEM_MOJAVE='Mac OS X 10.14 "Mojave"'
export SYSTEM_CATALINA='Mac OS X 10.15 "Catalina"'
export SYSTEM_BIG_SUR='macOS 11 "Big Sur"'
export SYSTEM_MONTEREY='macOS 12 "Monterey"'
export SYSTEM_VENTURA='macOS 13 "Ventura"'
export SYSTEM_SONOMA='macOS 14 "Sonoma"'
export SYSTEM_SEQUOIA='macOS 15 "Sequoia"'
export SYSTEM_MINGW='Windows (MinGW)'
export SYSTEM_WSL='WSL'
export SYSTEM_NIX='Linux'
export SYSTEM_CENTOS='Centos'
export SYSTEM_CENTOS5='Centos 5'
export SYSTEM_FEDORA='Fedora Core'
export SYSTEM_FEDORA4='Fedora Core 4'
export SYSTEM_ARCH='Arch Linux'
export SYSTEM_UBUNTU='Ubuntu'
export SYSTEM_UNKNOWN='Unknown'

kernel="$(uname -s)"
case "$kernel" in
Darwin*)
   export IS_MAC='true'
   ;;
MINGW*)
   export IS_MINGW='true'
   ;;
Linux*)
   export IS_LINUX='true'
   ;;
esac

if [ -e '/proc/sys/fs/binfmt_misc/WSLInterop' ]; then
   export IS_WSL='true'
fi

if [ -z "$SYSTEM" ]; then
   export system_was_unset='true'
   export SYSTEM="$kernel"

   # Come up with a halfway-decent starting point to fill `$SYSTEM` in .shenv.local
   if [ -n "$IS_MINGW" ]; then
      export SYSTEM="$SYSTEM_MINGW"

   elif [ -n "$IS_MAC" ]; then
      case "$(sw_vers -productVersion)" in
      10.4*)
         export SYSTEM="$SYSTEM_TIGER"
         ;;
      10.5*)
         export SYSTEM="$SYSTEM_LEOPARD"
         ;;
      10.6*)
         export SYSTEM="$SYSTEM_SNOW_LEOPARD"
         ;;
      10.7*)
         export SYSTEM="$SYSTEM_LION"
         ;;
      10.8*)
         export SYSTEM="$SYSTEM_MOUNTAIN_LION"
         ;;
      10.9*)
         export SYSTEM="$SYSTEM_MAVERICKS"
         ;;
      10.10*)
         export SYSTEM="$SYSTEM_YOSEMITE"
         ;;
      10.11*)
         export SYSTEM="$SYSTEM_EL_CAPITAN"
         ;;
      10.12*)
         export SYSTEM="$SYSTEM_SIERRA"
         ;;
      10.13*)
         export SYSTEM="$SYSTEM_HIGH_SIERRA"
         ;;
      10.14*)
         export SYSTEM="$SYSTEM_MOJAVE"
         ;;
      10.15*)
         export SYSTEM="$SYSTEM_CATALINA"
         ;;
      11.*)
         export SYSTEM="$SYSTEM_BIG_SUR"
         ;;
      12.*)
         export SYSTEM="$SYSTEM_MONTEREY"
         ;;
      13.*)
         export SYSTEM="$SYSTEM_VENTURA"
         ;;
      14.*)
         export SYSTEM="$SYSTEM_SONOMA"
         ;;
      15.*)
         export SYSTEM="$SYSTEM_SEQUOIA"
         ;;
      esac

   elif [ -n "$IS_LINUX" ]; then
      # Identify many Linux distros; from:
      #    <https://unix.stackexchange.com/a/6348>
      if [ -f /etc/os-release ]; then
         # freedesktop.org and systemd
         . /etc/os-release
         ver="$NAME $VERSION_ID"
      elif type lsb_release >/dev/null 2>&1; then
         # linuxbase.org
         ver="$(lsb_release -si) $(lsb_release -sr)"
      elif [ -f /etc/lsb-release ]; then
         # For some versions of Debian/Ubuntu without lsb_release command
         . /etc/lsb-release
         ver="$DISTRIB_ID $DISTRIB_RELEASE"
      elif [ -f /etc/debian_version ]; then
         # Older Debian/Ubuntu/etc.
         ver="Debian $(cat /etc/debian_version)"
      elif [ -z "$IS_WSL" ]; then
         # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
         ver=$(uname -r)
      fi

      export SYSTEM="$SYSTEM ($ver)"

      if [ -n "$IS_WSL" ]; then
         ver="$(cmd.exe /c wmic os get Caption,CSDVersion /value | tr -d '\r' | sed -e 's|\w\+=||g' | xargs)"
         export SYSTEM="$SYSTEM (WSL, $ver)"
      fi
   fi
fi

if [ -n "$IS_MAC" ]; then
   arch="$(uname -m)"
   case "$arch" in
   x86_64*)
      case "$(uname -a)" in
      *ARM64*)
         export SYSTEM="$SYSTEM (ARM64)"
         ;;
      *)
         export SYSTEM="$SYSTEM (x86_64)"
         ;;
      esac
      ;;
   i*86)
      export SYSTEM="$SYSTEM (x86_32)"
      ;;
   arm*)
      export SYSTEM="$SYSTEM (ARM32)"
      ;;
   aarch64)
      export SYSTEM="$SYSTEM (ARM64)"
      ;;
   esac
fi

# XDG base directories
[ -z "$XDG_CONFIG_HOME" ] && export XDG_CONFIG_HOME="$HOME/.config"
[ -z "$XDG_CACHE_HOME" ] && export XDG_CACHE_HOME="$HOME/.cache"
[ -z "$XDG_BIN_HOME" ] && export XDG_BIN_HOME="$HOME/.local/bin"
[ -z "$XDG_DATA_HOME" ] && export XDG_DATA_HOME="$HOME/.local/share"
[ -z "$XDG_RUNTIME_DIR" ] && export XDG_RUNTIME_DIR="$HOME/.local/run"
[ -z "$XDG_STATE_HOME" ] && export XDG_STATE_HOME="$HOME/.local/state"
[ -z "$XDG_SYNC_HOME" ] && export XDG_SYNC_HOME="$HOME/.local/sync"

# Remove or replace an element of $1
#
#   $1 name of the shell variable to set (e.g. 'PATH')
#   $2 the precise string to be removed/replaced
#   $3 the replacement string (use "" for removal)
#   $4 if passed precisely "ONLY_IF_DIR", check for directory-existence before adding element
replace_el() {
   if [ "$4" != "ONLY_IF_DIR" ] || [ -d "$3" ]; then
      list="$(eval echo '$'"$1")"
      export "$1"="$(
         echo "$list" | tr ":" "\n" |
            sed "s:^$2\$:$3:; /^\$/d" |
            tr "\n" ":" | sed 's|:$||'
      )"
   fi
}

prepend_el() {
   if [ "$3" != "ONLY_IF_DIR" ] || [ -d "$2" ]; then
      replace_el "$1" "$2"
      list="$(eval echo '$'"$1")"
      export "$1"="$2:$list"
   fi
}

append_el() {
   if [ "$3" != "ONLY_IF_DIR" ] || [ -d "$2" ]; then
      replace_el "$1" "$2"
      list="$(eval echo '$'"$1")"
      export "$1"="$list:$2"
   fi
}

# FIXME: The default path, with ~/.zshrc and ~/.profile disabled, seems to be `/usr/bin:/bin`. This
#        should be `/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin`, as it is for new accounts. I've
#        screwed up some configuration somewhere, but I have no idea where. I'm hard-coding this,
#        for now; but it needs to be tracked down and fixed. (AS OF MAVERICKS)
prepend_el PATH /usr/local/bin
prepend_el PATH /sbin
prepend_el PATH /usr/sbin
prepend_el PATH /bin
prepend_el PATH /usr/bin

case "$SYSTEM" in
*"$SYSTEM_MACOS"* | *"$SYSTEM_OSX"*)
   export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Home/"
   #export EC2_HOME="`/usr/local/bin/brew --prefix ec2-api-tools`"        # Slow.
   export AWS_HOME="$HOME/.ec2"
   ;;
esac

# Homebrew
export HOMEBREW_X86_PREFIX="/usr/local"
export HOMEBREW_ARM_PREFIX="/opt/homebrew"
export HOMEBREW_CASK_OPTS='--fontdir=/Library/Fonts'

# Hardcoding this; saves the startup cost of re-running this for every shell.
#export HOMEBREW_PREFIX="$(brew --prefix)"
case "$SYSTEM" in
*"$SYSTEM_MACOS"*"ARM"*)
   export HOMEBREW_PREFIX="$HOMEBREW_ARM_PREFIX"
   ;;
*"$SYSTEM_MACOS"* | *"$SYSTEM_OSX"*)
   export HOMEBREW_PREFIX="$HOMEBREW_X86_PREFIX"
   ;;
esac

# This is a *horrible* hack to get ahold of the default `$OPAM_SWITCH_PREFIX`.
eval "$(head -n2 ~/.opam/opam-init/variables.sh)"

# $PATH setup
# ===========
# NOTE: Be aware that `packages.zsh` is loaded *after* this, and thus zsh packages might prepend
# *all* of these, taking first-place in the lookup order.
case "$SYSTEM" in
*"$SYSTEM_MACOS"* | *"$SYSTEM_OSX"*)
   if [ -n "$HOMEBREW_X86_PREFIX" ] && [ -d "$HOMEBREW_X86_PREFIX" ]; then
      prepend_el PATH "$HOMEBREW_X86_PREFIX/bin"                      #  8. < Homebrew
      prepend_el PATH "$HOMEBREW_X86_PREFIX/opt/llvm/bin" ONLY_IF_DIR #  7. < Homebrew's llvm / clang
   fi

   append_el PATH "/Library/TeX/texbin" ONLY_IF_DIR # -6. > MacTeX
   append_el PATH "/usr/X11/bin" ONLY_IF_DIR        # -5. > X11
   ;;
esac

# Big Sur and later - note that `=` in sh is *matching*, not equality like `-eq`.
# if [[ $SYSTEM = *Mac* ]] && [[ $SYSTEM != *' 10.'* ]]; then
case "$SYSTEM" in
*"$SYSTEM_MACOS"*"ARM"*)
   if [ -n "$HOMEBREW_ARM_PREFIX" ] && [ -d "$HOMEBREW_ARM_PREFIX" ]; then
      debug_path "prepending '$HOMEBREW_ARM_PREFIX/bin' (\$SYSTEM is both macOS & ARM)"
      prepend_el PATH "$HOMEBREW_ARM_PREFIX/bin" ONLY_IF_DIR #  6. < Homebrew (ARM-native)
   fi
   ;;
*)
   debug_path "not prepending '$HOMEBREW_ARM_PREFIX/bin' (for '$SYSTEM')"
   ;;
esac

prepend_el PATH "$HOME/.local/share/mise/shims"   #  6. < mise
prepend_el PATH "$HOME/.bin"                      #  5. < local binaries
prepend_el PATH "$HOME/.dotnet/tools" ONLY_IF_DIR #  4. < .NET Core SDK: tools
prepend_el PATH "$HOME/.cargo/bin" ONLY_IF_DIR    #  3. < Cargo (Rust) binaries
prepend_el PATH "$OPAM_SWITCH_PREFIX/bin"         #  2. < OPAM local bin
prepend_el PATH "./node_modules/.bin"             #  1. < npm (local)

append_el PATH "$HOME/.local/bin"                     # -4. > $XDG_BIN_HOME, mostly mise and sheldon
append_el PATH "$HOME/.opam/_globals/bin" ONLY_IF_DIR # -3. < OPAM global bin (see Bootstrap/ocaml.sh)
append_el PATH "/usr/local/cuda/bin" ONLY_IF_DIR      # -2. > CUDA

if [ -n "$AWS_HOME" ] && [ -d "$AWS_HOME" ]; then
   append_el PATH "$AWS_HOME/bin" # -1. > EC2
fi

export PATH

debug_path_dump 'after'

if [ -n "$ZSH_VERSION" ]; then
   mise_plugin_path="$HOME/.local/share/sheldon/repos/github.com/wintermi/zsh-mise/zsh-mise.plugin.zsh"
   if [ -f "$mise_plugin_path" ]; then
      . "$mise_plugin_path"

      debug_path_dump 'after zsh-mise.plugin.zsh'
   fi

else
   debug_path 'not loading zsh-mise.plugin.zsh (not zsh)'
fi

# Nix
unset __ETC_PROFILE_NIX_SOURCED
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
   . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix
