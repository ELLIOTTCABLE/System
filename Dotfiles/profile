if [[ $- != *i* ]] ; then
  # Shell is non-interactive.  Be done now!
  return
fi

if [[ "$DEBUG_PATH" == true ]]; then
   echo '~/.profile (before): $PATH = '
   echo $PATH | tr ':' "\n" | nl
fi


source "$HOME/.shenv"
source "$HOME/.shell_colours"

while [[ -z $SYSTEM || $SYSTEM =~ $SYSTEM_UNKNOWN ]]; do
   echo '$SYSTEM \033[0;91mis not set!\033[m Opening nano so you can configure it ...'

   if [[ -d "$HOME/Library/System" ]]; then
      SYSTEM_REPO="$HOME/Library/System"
   elif [[ -d "$HOME/.files" ]]; then
      SYSTEM_REPO="$HOME/.files"
   else
      echo '\033[0;91mCannot locate dotfiles!\033[m Please paste the path to your System.git clone:'
      read -p '$SYSTEM_REPO: ' SYSTEM_REPO
   fi

   template="$SYSTEM_REPO/Dotfiles/shenv.local.template"
   if [[ ! -f "$template" ]]; then
      echo '\033[0;91mStill cannot locate shenv.local template!\033[m Crashing.'
      echo "Tried: '$template'"
      sleep 10
      exit 1
   fi


   sleep 3
   rm "$HOME/.shenv.local"
   cp "$SYSTEM_REPO/Dotfiles/shenv.local.template" "$HOME/.shenv.local"
   echo 'export SYSTEM_REPO="'$SYSTEM_REPO'"' >> "$HOME/.shenv.local"
   nano "$HOME/.shenv.local"
   source "$HOME/.shenv.local"
done

stty -ixon

# Install nodenv & rbenv
# FIXME: These leave Bash out in the cold.
if [ -z "$NODENV_ROOT" ]; then
   # FIXME: Pretty Mac-centric.
   printf "\e[31m%s\e[m — you'll need to install it with Homebrew ...\n" \
      "[nodenv] nodenv is missing"
fi

if [ -z "$RBENV_ROOT" ]; then
   # FIXME: Pretty Mac-centric.
   printf "\e[31m%s\e[m — you'll need to install it with Homebrew ...\n" \
      "[rbenv] rbenv is missing"
else
   # NOTE: This is configured by rbenv.plugin.zsh, now.
   #rbenv() {
   #   ...
   #}
fi

export HISTIGNORE="fg"


# ssh
export SSH_AUTH_SOCK="$HOME/.gnupg/S.gpg-agent.ssh"


# less
export PAGER='less'
source "$HOME/.config/less.temp.sh"

# OS X-specific commands
if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias espresso='open -a Espresso'
  alias esp='espresso'

  alias xcode='open -a Xcode'

  synalyze() { open "$1" -a '/Applications/Synalyze It!.app' }

  alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --enable-experimental-extension-apis'

  woman() { man -t $1 | open -fa Preview ;}

  alias droid='say -v cellos droid'

  alias pping='prettyping --nolegend'

  alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

  +() { qlmanage -p "$@" 2>/dev/null ;}

  # "intel brew"
  alias ibrew='arch -x86_64 brew'
fi

alias wget='wget -q --show-progress'

export EDITOR='nvim'
export VISUAL='vimr'

alias et='edit .'
alias etr='edit app config lib db public spec test vendor/plugins Rakefile'

alias edit=$EDITOR
alias e='edit'

move-n-link()( [ $# -ne 2 ] && print "Usage: move-n-link FROM TO" && exit 1;
   mv "$1" "$2" && { ln -s "$2" "$1" || mv "$2" "$1" } )

function whichpath() {
   command -v "$1" >&- && \
      echo $PATH | tr ':' "\n" | nl | \
      grep --color -C100 -E "$(dirname "$(which "$1")")"
}

export CLICOLOR='yes'

export NVIM_LISTEN_ADDRESS="/tmp/nvimsocket"

# Vim invocations
van()  {  vim               '+call vimman#("'"$1"'")' ;}
mvan() { mvim               '+call vimman#("'"$1"'")' ;}
nvan() { nvim               '+call vimman#("'"$1"'")' ;}
vanr() { vimr --nvim        '+call vimman#("'"$1"'")' ;}

nvpu() { nvim "+PlugUpdate" "+only" "+q" ;}

alias q='exit'
bye() {
   for volume in "$@"; do
      if [[ -z "$volume" ]]; then echo "ERROR: This function expects volume-names as arguments.";  return 1; fi
      if [[ ! -d "/Volumes/$volume" ]]; then echo 'ERROR: `/Volumes/'"$volume"'` does not exist!'; return 1; fi
   done

   ssh -O exit ell.io 2>/dev/null;

   for volume in "$@"; do
      hdiutil eject "/Volumes/$volume" 2>/dev/null
      st=$?
      if [ $st -ne 0 -a -d "/Volumes/$volume" ]; then
         echo "Ejection failed. Need to kill some things first ..."
         for PID in `lsof -t "/Volumes/$volume"`; do
            read -q 'consent?''Kill `'`ps -p $PID -o 'comm='`'`? '
            echo
            case $consent in
               [Nn]*) break 2;;
               [Yy]*) kill -HUP $PID;
            esac
         done
         hdiutil eject "/Volumes/$volume" && exit
      else
         exit
      fi
      sleep 2.5
   done
}

# Make mkdir recursive
alias mkdir='mkdir -p'

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  # Real trashing for the win!
  trash() { mv $1 ~/.Trash ;}

  alias eject='drutil eject 0'
fi

# Setup directory listing
if [[ $SYSTEM =~ $SYSTEM_NIX ]]; then
  alias ls='ls --color=always -alAFhp'
else
  alias ls='ls -alAGhp'
fi
alias cdd='cd - '                     # goto last dir cd'ed from

# Screen tools
alias ss='screen -S'
alias sls='screen -list'

# Ruby
alias ri='ri -Tf ansi'

# See: https://github.com/Homebrew/homebrew-core/pull/47402
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

# Rails
alias sc='./script/console'
alias ss='./script/server'
if [[ $SYSTEM =~ $SYSTEM_LEOPARD ]]; then
  export ERAILS="/Library/Open\ Source/Ruby\ on\ Rails/Edge"
elif [[ $SYSTEM =~ $SYSTEM_TIGER ]]; then
  export ERAILS="/Library/Rails/source/edge"
else
  export ERAILS="/usr/local/src/rails/edge"
fi
alias erails="ruby $ERAILS/railties/bin/rails"

# Merb
alias mat='merb -a thin'

# Rake
alias aok='rake aok'

# Server control
alias df='df -kH'

### JavaScript
nrs(){ local script="$1"; shift; npm --loglevel=silent run-script "$script" -- "$@" ;}

alias svisor="supervisor --no-restart-on exit"
alias cvisor="svisor --extensions 'node|js|coffee|iced' --exec coffee"

### OCaml
# `:MerlinLocate` et al cannot locate OPAM-installed stuff, unless that stuff is left laying around
# (see: <https://github.com/ocaml/merlin/wiki/Letting-merlin-locate-go-to-stuff-in-.opam>)
export OPAMKEEPBUILDDIR=true
export OCAMLPARAM="_,bin-annot=1"

alias d='dune'


alias grep='grep --color=auto'
alias ag="ag --group --pager='less -XFRS' \
   --color --color-path=91 --color-line-number='`printf "m   \033[96"`' --color-match=34"

rg() { command rg "$@" --pretty \
   --colors 'path:fg:red' --colors 'path:style:intense' --colors 'match:fg:blue' \
   | less -XFRS ;}

export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --hidden --follow --smart-case --glob "!.git/*"'

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias nzb='hellanzb.py'
fi

alias tu='top -o cpu'
alias tm='top -o vsize'

# SVN
alias sco='svn co'
#alias sup='svn up'
alias sci='svn ci -m'
alias saa='svn status | grep "^\?" | awk "{print \$2}" | xargs svn add'

# git
alias g='git'
alias gull='g pull'
alias gush='g push'
alias gad='g add'
alias germ='g rm'
alias glean='g clean'
alias go='g co'
alias gin='g ci'
alias grain='g rain'
alias ganch='g branch'
alias clanch='git symbolic-ref HEAD "refs/heads/$1" && rm -f ".git/index" && git clean -fdx'
alias gash='g stash'
alias giff='g diff --patch-with-stat -M -C --find-copies-harder -l64'
alias gifft='g difftool'
alias gerget='g mergetool'

glog()   { elliolog $* | less -SRXF ;}
reflog() { glog --all $* $(git log -g --pretty=format:%h) ;}

alias gitlel='git show master:.gitlabels | less -RS'

# alternatives, using the 'stage' metaphor
alias stage='g add'
alias unstage='g reset'
alias staged='gist'
alias unstiff='giff' # unstaged diff
alias stiff='giff --cached' # staged diff
alias stiff-last='giff HEAD^ HEAD' # last commit diff

# ‘alternate_git’:
#     > GIT_ALTERNATE_OBJECT_DIRECTORIES=../other_repo/.git/objects \
#        git cherry-pick $(git --git-dir=../other_repo/.git rev-parse --verify e9721)
# ... becomes ...
#     > agit ~[../other_repo] cherry-pick ~[e9721]
#
# This is some seriously evil, hacky shit; but it works, unlike my original attempt with subshells.
# (Damn you, subshells.)
agit() {
   env GIT_ALTERNATE_OBJECT_DIRECTORIES="$1/.git/objects" \
      =git ${${*:2}[@]} ;}

zsh_directory_name_functions=(${zsh_directory_name_functions[@]} uncommitish set_uncommitish_repo)
uncommitish() { if [[ $1 == 'n' ]]; then
   if [[ -z "$UNCOMMITISH_REPO" ]]; then return 1; fi

   rev=$(git --git-dir="$UNCOMMITISH_REPO/.git" rev-parse --verify $2 2>/dev/null); st=$?
   if (( $st != 0 )); then return $st; fi

   reply=("$rev")
else return 1; fi ;}

set_uncommitish_repo() { if [[ $1 == 'n' ]]; then
   export UNCOMMITISH_REPO="$2"
   reply=("$2")
else return 1; fi ;}

export zsh_directory_name_functions

alias diff='colordiff'

# make `dig` less insanely verbose.
alias dig='dig +nocmd +nocomments +noadditional +nostats'

alias toggle='ruby -pi'\'\'' -e '\''if ($_=~/--Begin/)..($_=~/--End/); $_=~/^#~/ ? $_.sub!(/#~/,"") : $_.sub!(/^/,"#~"); end'\'''

# C
export CC="clang"
C99() { eval local last="\$$#"; last=${last##*/}; $CC -std=c99 -pedantic-errors -Wall -O0 -o "${last%.*}.o" "$@" ;}

# C++
export CXX="g++"
C++() { eval local last="\$$#"; last=${last##*/}; $CXX -o "${last%.*}.o" "$@" ;}

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias eve="/Applications/EVE\ Online.app/Contents/MacOS/cider"
fi

export TODOFILE=$HOME/todo.markdown
if [ -f $TODOFILE ]; then
  if [[ $(cat $TODOFILE) =~ "- " ]]; then
    echo -e "${SYSTEM_COLOUR_BOLD}Todo List:${CLEAR_COLOUR}"; tput sgr0
    echo -e "${SYSTEM_COLOUR}==========${CLEAR_COLOUR}"; tput sgr0
    cat $TODOFILE
  fi
fi

# Red STDERR
# rse <command string>
rse() {
  # We need to wrap each phrase of the command in quotes to preserve arguments that contain whitespace
  # Execute the command, swap STDOUT and STDERR, colour STDOUT, swap back
  ((eval $(for phrase in "$@"; do echo -n "'$phrase' "; done)) 3>&1 1>&2 2>&3 | sed -e "s/^\(.*\)$/$(echo -en \\033)[31;1m\1$(echo -en \\033)[0m/") 3>&1 1>&2 2>&3
}

# Bash-only. Whatever.
# {{{
# Node Completion - Auto-generated, do not touch. (Fuck you, I touched it anyway. ~ ELLIOTTCABLE)
#for f in $(command ls ~/.node-completion); do
#  f="$HOME/.node-completion/$f"
#  test -f "$f" && . "$f"
#done
# }}}


if [[ "$DEBUG_PATH" == true ]]; then
   echo '~/.profile (after): $PATH = '
   echo $PATH | tr ':' "\n" | nl
fi

# Create files as u=rwx, g=rx, o=rx
umask 022
