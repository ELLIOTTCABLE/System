if [[ $- != *i* ]] ; then
  # Shell is non-interactive.  Be done now!
  return
fi

export SYSTEM_OSX='Mac OS X'
export SYSTEM_TIGER='Mac OS X 10.4'
export SYSTEM_LEOPARD='Mac OS X 10.5'
export SYSTEM_SNOW_LEOPARD='Mac OS X 10.6'
export SYSTEM_LION='Mac OS X 10.7'
export SYSTEM_MOUNTAIN_LION='Mac OS X 10.8'
export SYSTEM_MAVERICKS='Mac OS X 10.9'
export SYSTEM_NIX='Linux'
export SYSTEM_CENTOS='Centos'
export SYSTEM_CENTOS5='Centos 5'
export SYSTEM_FEDORA='Fedora Core'
export SYSTEM_FEDORA4='Fedora Core 4'
export SYSTEM_ARCH='Arch Linux'
export SYSTEM_UNKNOWN='Unknown'

source $HOME/.profile.local
while [[ -z $SYSTEM || $SYSTEM =~ $SYSTEM_UNKNOWN ]]; do
  echo '$SYSTEM \033[0;91mis not set!\033[m Opening $EDITOR so you can set it…'
  sleep 2
  rm $HOME/.profile.local
  cp $HOME/.files/profile.local $HOME/.profile.local # FIXME: `.files` shouldn't be hardcoded
  edit $HOME/.profile.local
  source $HOME/.profile.local
done

source $HOME/.shell_colours

stty -ixon


# less
export PAGER='less'
if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
   export LESSOPEN="| source-highlight --failsafe --infer-lang -f esc \
      --style-file='$HOME/.source-highlight/source-highlight-solarized/esc-solarized.style' -i %s"
fi

# OS X-specific commands
if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias espresso='open -a Espresso'
  alias esp='espresso'

  alias xcode='open -a Xcode'
  
  alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --enable-experimental-extension-apis'
  
  function woman(){ man -t $1 | open -fa Preview }

  alias ping='prettyping --nolegend'
fi

export EDITOR='vim'
export VISUAL='vim'

alias et='edit .'
alias etr='edit app config lib db public spec test vendor/plugins Rakefile'

alias edit=$EDITOR
alias e='edit'

export CLICOLOR='yes'
van()  {  vim "+help $1" "+only" }
mvan() { mvim "+help $1" "+only" }

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Home/"
  export EC2_HOME="`/usr/local/bin/brew --prefix ec2-api-tools`"
  export AWS_HOME="$HOME/.ec2"
fi

#FIXME: bash-incompatible
export EC2_PRIVATE_KEY="$(print $HOME/.ec2/pk-*.pem(N))"
export EC2_CERT="$(print $HOME/.ec2/cert-*.pem(N))"

alias q='exit'
bye() {
   for volume in "$@"; do
      if [[ -z "$volume" ]]; then echo "ERROR: This function expects volume-names as arguments.";  return 1; fi
      if [[ ! -d "/Volumes/$volume" ]]; then echo 'ERROR: `/Volumes/'"$volume"'` does not exist!'; return 1; fi
   done
   
   ssh -O exit ell.io 2>/dev/null;
   
   for volume in "$@"; do
      hdiutil eject "/Volumes/$volume" 2>/dev/null
      st=$?
      if [ $st -ne 0 -a -d "/Volumes/$volume" ]; then
         echo "Ejection failed. Need to kill some things first ..."
         for PID in `lsof -t "/Volumes/$volume"`; do
            read -q 'consent?''Kill `'`ps -p $PID -o 'comm='`'`? '
            echo
            case $consent in
               [Nn]*) break 2;;
               [Yy]*) kill -HUP $PID;
            esac
         done
         hdiutil eject "/Volumes/$volume" && exit
      else
         exit
      fi
      sleep 2.5
   done
}

# Make mkdir recursive
alias mkdir='mkdir -p'

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  # Real trashing for the win!
  trash() { mv $1 ~/.Trash }
  
  alias eject='drutil eject 0'
fi

# Setup directory listing
if [[ $SYSTEM =~ $SYSTEM_NIX ]]; then
  alias ls='ls --color=always -alAFhp'
else
  alias ls='ls -alAGhp'
fi
alias cdd='cd - '                     # goto last dir cd'ed from

# Screen tools
alias ss='screen -S'
alias sls='screen -list'

# Ruby
alias ri='ri -Tf ansi'

# Rails
alias sc='./script/console'
alias ss='./script/server'
if [[ $SYSTEM =~ $SYSTEM_LEOPARD ]]; then
  export ERAILS="/Library/Open\ Source/Ruby\ on\ Rails/Edge"
elif [[ $SYSTEM =~ $SYSTEM_TIGER ]]; then
  export ERAILS="/Library/Rails/source/edge"
else
  export ERAILS="/usr/local/src/rails/edge"
fi
alias erails="ruby $ERAILS/railties/bin/rails"

# Merb
alias mat='merb -a thin'

# Rake
alias aok='rake aok'

# Server control
alias df='df -kH'

### JavaScript
alias nrs='npm --loglevel=silent run-script'

alias inspector-11="nvm run v0.11.13 `which node-inspector`"

alias svisor="supervisor --no-restart-on exit"
alias cvisor="svisor --extensions 'node|js|coffee|iced' --exec coffee"

alias grep='grep --color=auto'
alias ag="ag --group --pager='less -XFRS' \
   --color --color-path=91 --color-line-number='`printf "m   \033[96"`' --color-match=34"

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias nzb='hellanzb.py'
fi

alias tu='top -o cpu'
alias tm='top -o vsize'

# SVN
alias sco='svn co'
#alias sup='svn up'
alias sci='svn ci -m'
alias saa='svn status | grep "^\?" | awk "{print \$2}" | xargs svn add'

# git
alias g='git'           # vvv This is so complex, it should really be a script… lol. vvv
alias gist='g diff -M -C --find-copies-harder -l64 --stat --cached --color | sed -E "s/^(.*)\|/`echo -en '\''\e[32m'\''`\1`echo -en '\''\e[00m'\''`|/" && g diff -M -C --find-copies-harder -l64 --stat --color | sed -E "s/^(.*)\|/`echo -en '\''\e[31m'\''`\1`echo -en '\''\e[00m'\''`|/" && g ls-files --others --directory --no-empty-directory --exclude-standard | sed -E "s/^(.*)$/ `echo -en '\''\e[33m'\''`\1`echo -en '\''\e[00m'\''`/"'
alias gull='g pull'
alias gush='g push'
alias gad='g add'
alias germ='g rm'
alias glean='g clean'
alias go='g co'
alias gin='g ci'
alias grain='g rain'
alias ganch='g branch'
alias clanch='git symbolic-ref HEAD "refs/heads/$1" && rm -f ".git/index" && git clean -fdx'
alias gash='g stash'
alias giff='g diff --patch-with-stat -M -C --find-copies-harder -l64'
alias gifft='g difftool'
alias gerget='g mergetool'
function ellio_log() {
   # FIXME: --no-minor doesn't work yet, because git-log's being weird.
   # FIXME: Remove --no-granules and --no-minor from the $*
   g log --graph --date-order --cherry-mark --left-right \
      --all-match -E ${${*[(r)--no-granules]}:+--grep='^[^\+]'} ${${*[(r)--no-minor]}:+--grep='^([^\(]|\([^-])'} \
      --color --abbrev=5 --pretty=solarized-parseable $* \
   | ruby -an -F"\u001F" -r '~/.source/format-glog' -e 'puts format_glog($F).join' }
function glog() {
   ellio_log $* | less -SRXF }
function omglog() {
   glog --all $* $(git log -g --pretty=format:%h) }
function sup() {
   git -c color.status=true status |
      awk '/(Changes to be committed|Changes not staged for commit|nothing to commit, working directory clean)/ {exit} {print}'
   
   branch=$1
   if [[ -z "$branch" ]]; then
      branch=$(git rev-parse --abbrev-ref HEAD) ;fi         # vvv  Might be a bit of an assumption.
   # This should probably be more robust. Currently, it'll only support three-deep branches.
   master='Master'
   remote=$(git rev-parse --short "$master@{upstream}~5")
   upstream=$(git rev-parse --symbolic-full-name --abbrev-ref "@{upstream}")
   
   gist
   echo -e "\n\033[1m-- Recent history: --------\033[0m"
   ellio_log "${remote}..${master}" "${remote}..${upstream}" "${remote}..${branch}"
   echo -e "\n\033[1m-- Stored stashes: --------\033[0m"
   git stash list --pretty=solarized-reflog

}

alias ol='omglog'

alias gitlel='git show Master:.gitlabels | less -RS'

# alternatives, using the 'stage' metaphor
alias stage='g add'
alias unstage='g reset'
alias staged='gist'
alias unstiff='giff' # unstaged diff
alias stiff='giff --cached' # staged diff
alias stiff-last='giff HEAD^ HEAD' # last commit diff

# ‘alternate_git’:
#     > GIT_ALTERNATE_OBJECT_DIRECTORIES=../other_repo/.git/objects \ 
#        git cherry-pick $(git --git-dir=../other_repo/.git rev-parse --verify e9721)
# ... becomes ...
#     > agit ~[../other_repo] cherry-pick ~[e9721]
# 
# This is some seriously evil, hacky shit; but it works, unlike my original attempt with subshells.
# (Damn you, subshells.)
function agit() {
   env GIT_ALTERNATE_OBJECT_DIRECTORIES="$1/.git/objects" \
      =git ${${*:2}[@]} }

zsh_directory_name_functions=(${zsh_directory_name_functions[@]} uncommitish set_uncommitish_repo)
function uncommitish() { if [[ $1 == 'n' ]]; then
   if [[ -z "$UNCOMMITISH_REPO" ]]; then return 1; fi
   
   rev=$(git --git-dir="$UNCOMMITISH_REPO/.git" rev-parse --verify $2 2>/dev/null); st=$?
   if (( $st != 0 )); then return $st; fi
   
   reply=("$rev")
else return 1; fi }

function set_uncommitish_repo() { if [[ $1 == 'n' ]]; then
   export UNCOMMITISH_REPO="$2"
   reply=("$2")
else return 1; fi }

export zsh_directory_name_functions

alias diff='colordiff'

# make `dig` less insanely verbose.
alias dig='dig +nocmd +nocomments +noadditional +nostats'

alias toggle='ruby -pi'\'\'' -e '\''if ($_=~/--Begin/)..($_=~/--End/); $_=~/^#~/ ? $_.sub!(/#~/,"") : $_.sub!(/^/,"#~"); end'\'''

# C
export CC="clang"
C99() { eval local last="\$$#"; last=${last##*/}; $CC -std=c99 -pedantic-errors -Wall -O0 -o "${last%.*}.o" "$@" }

# C++
export CXX="g++"
C++() { eval local last="\$$#"; last=${last##*/}; $CXX -o "${last%.*}.o" "$@" }

# Homebrew
if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  export HOMEBREW_CASK_OPTS='--appdir=/Applications'
fi

if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  alias eve="/Applications/EVE\ Online.app/Contents/MacOS/cider"
fi

export TODOFILE=$HOME/todo.markdown
if [ -f $TODOFILE ]; then
  if [[ $(cat $TODOFILE) =~ "- " ]]; then
    echo -e "${SYSTEM_COLOUR_BOLD}Todo List:${CLEAR_COLOUR}"; tput sgr0
    echo -e "${SYSTEM_COLOUR}==========${CLEAR_COLOUR}"; tput sgr0
    cat $TODOFILE
  fi
fi

if [ ! -r $HOME/.cheats ]; then
  echo "Rebuilding Cheat cache... "
  cheat sheets | egrep '^ ' | awk {'print $1'} > $HOME/.cheats
fi

# Red STDERR
# rse <command string>
rse () {
  # We need to wrap each phrase of the command in quotes to preserve arguments that contain whitespace
  # Execute the command, swap STDOUT and STDERR, colour STDOUT, swap back
  ((eval $(for phrase in "$@"; do echo -n "'$phrase' "; done)) 3>&1 1>&2 2>&3 | sed -e "s/^\(.*\)$/$(echo -en \\033)[31;1m\1$(echo -en \\033)[0m/") 3>&1 1>&2 2>&3
}

# Bash-only. Whatever.
# {{{
# Node Completion - Auto-generated, do not touch. (Fuck you, I touched it anyway. ~ ELLIOTTCABLE)
for f in $(command ls ~/.node-completion); do
  f="$HOME/.node-completion/$f"
  test -f "$f" && . "$f"
done
# }}}

# Create files as u=rwx, g=rx, o=rx
umask 022

# FIXME: The default path, with ~/.zshrc and ~/.profile disabled, seems to be `/usr/bin:/bin`. This
#        should be `/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin`, as it is for new accounts. I've
#        screwed up some configuration somewhere, but I have no idea where. I'm hard-coding this,
#        for now; but it needs to be tracked down and fixed. (AS OF MAVERICKS)
export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"

# TODO: I'm pretty sure there's a command to manage these.
# XXX: Make sure to update ~/.MacOSX/environment.plist as well if you edit these!
if [[ $SYSTEM =~ $SYSTEM_OSX ]]; then
  PATH="/usr/local/bin:$PATH"             #  4. < Homebrew
  PATH="/usr/local/share/npm/bin:$PATH"   #  3. < npm (global)
  
  PATH="$PATH:/usr/X11/bin"               # -3. > X11
fi
# FIXME: Add npm-gobal path for Linux-installed nvm.
PATH="$HOME/.bin:$PATH"                   #  2. < local binaries
PATH="./node_modules/.bin:$PATH"          #  1. < npm (local)

PATH="$PATH:/usr/local/cuda/bin"          # -2. > CUDA
PATH="$PATH:$EC2_HOME/bin"                # -1. > EC2
export PATH

export NVM_DIR="/Users/ec/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]]          && source "$NVM_DIR/nvm.sh"
[[ -s "$HOME/.rvm/scripts/rvm" ]]  && source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/.travis/travis.sh" ]]  && source "$HOME/.travis/travis.sh"

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
