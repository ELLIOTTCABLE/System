#!/usr/bin/env bash
# shellcheck disable=SC1091
#               ^^ (using 'bash' as a reasonable attempt to subset zsh+bash)

if [[ $- != *i* ]] ; then
  # Shell is non-interactive.  Be done now!
  return
fi

debug_path_dump() {
   if [ "$DEBUG_PATH" = 'true' ]; then
      # shellcheck disable=SC2088
      echo "~/.profile ($1): \$PATH = "
      echo "$PATH" | tr ':' "\n" | nl
   fi
}

debug_path_dump 'before'

source "$HOME/.shenv"
source "$HOME/.shell_colours"

while [[ -n "$system_was_unset" ]] || [[ -z $SYSTEM ]] || [[ $SYSTEM =~ $SYSTEM_UNKNOWN ]]; do
   unset system_was_unset
   printf '%b\n' "\$SYSTEM ${ALERT_COLOUR}is not set!${CLEAR_COLOUR}"

   if [[ -d "$SYSTEM_REPO" ]]; then
      true
   elif [[ -d "$HOME/Library/System" ]]; then
      SYSTEM_REPO="$HOME/Library/System"
   elif [[ -d "$HOME/.system" ]]; then
      SYSTEM_REPO="$HOME/.system"
   else
      printf '%b\n' "${ALERT_COLOUR}Cannot locate dotfiles!${CLEAR_COLOUR} Please paste the path to your System.git clone:"
      prinft "\$SYSTEM_REPO: "
      read -r SYSTEM_REPO
   fi

   template="$SYSTEM_REPO/Dotfiles/shenv.local.template"
   if [[ ! -f "$template" ]]; then
      printf '%s\n' "${ALERT_COLOUR}Still cannot locate shenv.local template!${CLEAR_COLOUR} Crashing."
      printf '%s\n' "Tried: '$template'"
      sleep 10
      exit 1
   fi

   printf "Open nano so you can configure it? [yN, ^C for shell] "
   read -r yn
   case $yn in
      [Yy]*) ;;
          *) exit 1;;
   esac

   echo "Pre-filling \$SYSTEM_REPO: $SYSTEM_REPO"
   echo "Pre-filling \$SYSTEM: $SYSTEM"
   rm -fvI "$HOME/.shenv.local"
   sed \
      -e "/SYSTEM_REPO=/s|=''|='$SYSTEM_REPO'|" \
      -e "/SYSTEM=/s|='Unknown'|='$SYSTEM'|" \
      "$SYSTEM_REPO/Dotfiles/shenv.local.template" \
      > "$HOME/.shenv.local"

   sleep 3
   mkdir -p "$HOME/.local/share/nano/"
   nano "$HOME/.shenv.local"

   printf \\n
   source "$HOME/.shenv.local"
done

stty -ixon

export HISTIGNORE="fg"

# mise / asdf, runtime version manager
export MISE_CONFIG_FILE="$XDG_CONFIG_HOME/mise/config.toml"

if command -v mise >/dev/null; then
   eval "$(mise activate)"

else
   printf "[profile:mise] ${ALERT_COLOUR}%s${CLEAR_COLOUR}\n" \
      "mise hasn't initialized!"

   if [ -n "$IS_MAC" ]; then
      printf "[profile:mise] May I install it via Homebrew? [yN, ^C for minimal shell] "
      read -r yn
      case $yn in
         [Yy]*) ;;
            *) exit 1;;
      esac

      brew install mise

      mise trust "$HOME/.config/mise/config.toml"
      mise trust "$SYSTEM_REPO/.config/mie.toml"
      eval "$(mise activate)"
   else
      printf "[profile:mise] May I install it via their curl-script? [yN, ^C for minimal shell] "
      read -r yn
      case $yn in
         [Yy]*) ;;
            *) exit 1;;
      esac

      curl --proto '=https' -fLsS https://mise.run \
         | MISE_INSTALL_PATH="$HOME/.local/bin/mise" MISE_INSTALL_HELP=0 sh

      "$HOME/.local/bin/mise" trust "$HOME/.config/mise/config.toml"
      if [ -n "$IS_WSL" ]; then
         "$HOME/.local/bin/mise" trust "/mnt/c/Users/ec/.config/mise/config.toml"
      fi
      eval "$("$HOME/.local/bin/mise" activate)"
   fi

   printf \\n
fi

# Haskell, Cabal, and GHCup
export GHCUP_USE_XDG_DIRS='true'

# ssh
# This sets SSH_AUTH_SOCK in the case of ForwardAgent:
export SSH_IDENT="$SYSTEM_REPO/Vendor/ssh-ident/ssh-ident"
export BINARY_DIR="/usr/bin"

# 1Password
if [ -f "$XDG_CONFIG_HOME/op/plugins.sh" ]; then
   source "$XDG_CONFIG_HOME/op/plugins.sh"
fi


# less
export PAGER='less'
source "$XDG_CONFIG_HOME/less.temp.sh"

# `less +F` for multiple files, ala `tail -f`
# Usage:
#    lessf file1.log file2.log ...
# https://gist.github.com/ELLIOTTCABLE/1c5afda811c1c4b822cf75361e8ded2f
lessf() (
   if ! command -v unbuffer >&/dev/null; then
      if unb_bin="$(command -v stdbuf)"; then
         unbuffer() { "$unb_bin" -o0 "$@" ;}

      else
         printf "WARN: You probably want \`unbuffer\` from the 'expect' package or \`stdbuf\` from 'coreutils'.\n" >&2
         printf "WARN: Without them, output is buffered, and loglines may not appear immediately!\n" >&2
         sleep 5
      fi
   fi

   pad="7"
   for arg in "$@"; do
      fname="${arg##*/}"
      fname="${fname%.log}"
      if [ ${#fname} -gt "${pad}" ]; then
         pad="${#fname}"
      fi
   done

   tmpfile="$(mktemp "$TMPDIR/lessf.XXXXXX")"
   # shellcheck disable=SC2064
   trap "rm -f '$tmpfile'; trap - EXIT" EXIT INT HUP QUIT TERM

   printf "Following" >"$tmpfile"
   printf " '%s'," "$@" >>"$tmpfile"
   unbuffer tail -n10 -f "$@" \
      | awk "$(cat <<AWK
         # Drop blank lines
         /^$/ {next};

         # If the line starts with '==>', split the path and store the components in 'cmp'
         /^==> / {
            n = split(substr(\$0, 5, length - 8), cmp, "/")
            sub(/\.log\$/, "", cmp[n])
            next
         }

         # Print the last component of the path prepended to the logline
         {
            printf "%${pad}s: %s\n", cmp[n], \$0
         }
AWK
   )" >>"$tmpfile" &

   less -SRX +F "$tmpfile"
)

# OS X-specific commands
if [ -n "$IS_MAC" ]; then
  alias espresso='open -a Espresso'
  alias esp='espresso'

  alias xcode='open -a Xcode'

  synalyze() { open "$1" -a '/Applications/Synalyze It!.app' ;}

  alias chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --enable-experimental-extension-apis'

  woman() { man -t "$1" | open -fa Preview ;}

  alias droid='say -v cellos droid'

  alias pping='prettyping --nolegend'

  alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

  # "intel brew"
  alias ibrew='arch -x86_64 brew'

   # BlueBubbles Matrix bridge for iMessage; see:
   # <https://www.notion.so/troe/Beeper-Matrix-iMessage-bridges-18ef99b3151d8033acdcdbb72d2df168>
   alias beeper="open -a Beeper"
   alias bb-start="launchctl load -w ~/Library/LaunchAgents/com.beeper.bbctl.bluebubbles-imessage.plist"
   alias bb-stop="launchctl unload -w ~/Library/LaunchAgents/com.beeper.bbctl.bluebubbles-imessage.plist"
   alias bb-log="tail -f /Users/ec/.local/state/bbctl/bluebubbles-imessage*.log"
   alias bb-server-restart="killall BlueBubbles ; sleep 10 && open -a BlueBubbles"
fi

alias wget='wget -q --show-progress'

# TODO: Add a --visual flag or sth
export EDITOR="$HOME/.bin/embedded-editor-proxy.sh --wait"
export VISUAL="$HOME/.bin/embedded-editor-proxy.sh --wait"

alias et='edit .'

alias edit='$EDITOR'
alias e='edit'

move-n-link()( [ $# -ne 2 ] && print "Usage: move-n-link FROM TO" && exit 1;
   mv "$1" "$2" && { ln -s "$2" "$1" || mv "$2" "$1" ;} )

function whichpath() {
   command -v "$1" >&- && \
      echo "$PATH" | tr ':' "\n" | nl | \
      grep --color -C100 -E "$(dirname "$(which "$1")")"
}

export CLICOLOR='yes'

if [ -z "$NVIM_LISTEN_ADDRESS" ]; then
   export NVIM_LISTEN_ADDRESS="/tmp/nvimsocket"
fi

# Vim invocations
van()  {  vim               '+call vimman#("'"$1"'")' ;}
mvan() { mvim               '+call vimman#("'"$1"'")' ;}
nvan() { nvim               '+call vimman#("'"$1"'")' ;}
vanr() { vimr --nvim        '+call vimman#("'"$1"'")' ;}

nvpu() { nvim "+PlugUpdate" "+only" "+q" ;}

alias q='exit'
bye() {
   for volume in "$@"; do
      if [[ -z "$volume" ]]; then echo "ERROR: This function expects volume-names as arguments.";  return 1; fi
      if [[ ! -d "/Volumes/$volume" ]]; then echo 'ERROR: `/Volumes/'"$volume"'` does not exist!'; return 1; fi
   done

   ssh -O exit ell.io 2>/dev/null;

   for volume in "$@"; do
      hdiutil eject "/Volumes/$volume" 2>/dev/null
      st=$?
      if [ $st -ne 0 ] && [ -d "/Volumes/$volume" ]; then
         echo "Ejection failed. Need to kill some things first ..."
         for PID in $(lsof -t "/Volumes/$volume"); do
            read -rq 'consent?''Kill `'"$(ps -p "$PID" -o 'comm=')"'`? '
            echo
            # shellcheck disable=SC2154
            case $consent in
               [Nn]*) break 2;;
               [Yy]*) kill -HUP "$PID";
            esac
         done
         hdiutil eject "/Volumes/$volume" && exit
      else
         exit
      fi
      sleep 2.5
   done
}

# Make mkdir recursive
alias mkdir='mkdir -p'

if [ -n "$IS_MAC" ]; then
  # Real trashing for the win!
  trash() { mv "$1" ~/.Trash ;}

  alias eject='drutil eject 0'
fi

# Setup directory listing
if [[ $SYSTEM =~ $SYSTEM_NIX ]]; then
  alias ls='ls --color=always -alAFhp'
else
  alias ls='ls -alAGhp'
fi
alias cdd='cd - '                     # goto last dir cd'ed from

# Screen tools
alias ss='screen -S'
alias sls='screen -list'

# Ruby
alias ri='ri -Tf ansi'

# See: https://github.com/Homebrew/homebrew-core/pull/47402
# FIXME: This uses `brew --prefix` and is likely to be slow.
#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

# Rails
alias sc='./script/console'
alias ss='./script/server'
if [[ $SYSTEM =~ $SYSTEM_LEOPARD ]]; then
  export ERAILS="/Library/Open\ Source/Ruby\ on\ Rails/Edge"
elif [[ $SYSTEM =~ $SYSTEM_TIGER ]]; then
  export ERAILS="/Library/Rails/source/edge"
else
  export ERAILS="/usr/local/src/rails/edge"
fi
alias erails='ruby "$ERAILS"/railties/bin/rails'

# Merb
alias mat='merb -a thin'

# Rake
alias aok='rake aok'

# Server control
alias df='df -kH'

### JavaScript
nrs(){ local script="$1"; shift; npm --loglevel=silent run-script "$script" -- "$@" ;}

alias svisor="supervisor --no-restart-on exit"
alias cvisor="svisor --extensions 'node|js|coffee|iced' --exec coffee"

### OCaml
# `:MerlinLocate` et al cannot locate OPAM-installed stuff, unless that stuff is left laying around
# (see: <https://github.com/ocaml/merlin/wiki/Letting-merlin-locate-go-to-stuff-in-.opam>)
export OPAMKEEPBUILDDIR=true
export OCAMLPARAM="_,bin-annot=1"

alias d='dune'


alias grep='grep --color=auto'

# shellcheck disable=SC2139
alias ag="ag --group --pager='less -XFRS' \
   --color --color-path=91 --color-line-number='$(printf "m   \033[96")' --color-match=34"

rg() { command rg "$@" --pretty \
   --colors 'path:fg:red' --colors 'path:style:intense' --colors 'match:fg:blue' \
   | less -XFRS ;}

export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --hidden --follow --smart-case --glob "!.git/*"'

if [ -n "$IS_MAC" ]; then
  alias nzb='hellanzb.py'
fi

alias tu='top -o cpu'
alias tm='top -o vsize'

# SVN
alias sco='svn co'
#alias sup='svn up'
alias sci='svn ci -m'
saa() { svn status | grep "^\?" | awk "{print \$2}" | xargs svn add ;}

# git
# use Windows' git when working under C:\ drive
function git() {
   if pwd -P | grep -q "^\/mnt\/c\/*"; then
      git.exe "$@"
   else
      command git "$@"
   fi
}

alias g='git'
alias gull='g pull'
alias gush='g push'
alias gad='g add'
alias germ='g rm'
alias glean='g clean'
alias go='g co'
alias gin='g ci'
alias grain='g rain'
alias ganch='g branch'
clanch() { git symbolic-ref HEAD "refs/heads/$1" && rm -f ".git/index" && git clean -fdx ;}
alias gash='g stash'
alias giff='g diff --patch-with-stat -M -C --find-copies-harder -l64'
alias gifft='g difftool'
alias gerget='g mergetool'

glog()   { elliolog "$@" | less -SRXF ;}
# shellcheck disable=SC2046
reflog() { glog --all "$@" $(git log -g --pretty=format:%h) ;}

alias gitlel='git show master:.gitlabels | less -RS'

# alternatives, using the 'stage' metaphor
alias stage='g add'
alias unstage='g reset'
alias staged='gist'
alias unstiff='giff' # unstaged diff
alias stiff='giff --cached' # staged diff
alias stiff-last='giff HEAD^ HEAD' # last commit diff

# ‘alternate_git’:
#     > GIT_ALTERNATE_OBJECT_DIRECTORIES=../other_repo/.git/objects \
#        git cherry-pick $(git --git-dir=../other_repo/.git rev-parse --verify e9721)
# ... becomes ...
#     > agit ~[../other_repo] cherry-pick ~[e9721]
#
# This is some seriously evil, hacky shit; but it works, unlike my original attempt with subshells.
# (Damn you, subshells.)
agit() {
   # shellcheck disable=SC2068,SC2299
   env GIT_ALTERNATE_OBJECT_DIRECTORIES="$1/.git/objects" \
      =git ${${*:2}[@]} ;}

# shellcheck disable=SC2206
zsh_directory_name_functions=(${zsh_directory_name_functions[@]} uncommitish set_uncommitish_repo)
uncommitish() { if [[ $1 == 'n' ]]; then
   if [[ -z "$UNCOMMITISH_REPO" ]]; then return 1; fi

   rev=$(git --git-dir="$UNCOMMITISH_REPO/.git" rev-parse --verify "$2" 2>/dev/null); st=$?
   if (( st != 0 )); then return $st; fi

   reply=("$rev")
else return 1; fi ;}

# shellcheck disable=2034
set_uncommitish_repo() { if [[ $1 == 'n' ]]; then
   export UNCOMMITISH_REPO="$2"
   reply=("$2")
else return 1; fi ;}

export zsh_directory_name_functions

# make `dig` less insanely verbose.
alias dig='dig +nocmd +nocomments +noadditional +nostats'

alias toggle='ruby -pi'\'\'' -e '\''if ($_=~/--Begin/)..($_=~/--End/); $_=~/^#~/ ? $_.sub!(/#~/,"") : $_.sub!(/^/,"#~"); end'\'''

# C
export CC="clang"
C99() { eval local last="\$$#"; last=${last##*/}; $CC -std=c99 -pedantic-errors -Wall -O0 -o "${last%.*}.o" "$@" ;}

# C++
export CXX="g++"
# C++() { eval local last="\$$#"; last=${last##*/}; $CXX -o "${last%.*}.o" "$@" ;}

if [ -n "$IS_MAC" ]; then
  alias eve="/Applications/EVE\ Online.app/Contents/MacOS/cider"
fi

export TODOFILE=$HOME/todo.markdown
if [ -f "$TODOFILE" ]; then
  if [[ $(cat "$TODOFILE") =~ "- " ]]; then
    echo -e "${SYSTEM_COLOUR_BOLD}Todo List:${CLEAR_COLOUR}"; tput sgr0
    echo -e "${SYSTEM_COLOUR}==========${CLEAR_COLOUR}"; tput sgr0
    cat "$TODOFILE"
  fi
fi

# Red STDERR
# rse <command string>
rse() {
  # We need to wrap each phrase of the command in quotes to preserve arguments that contain whitespace
  # Execute the command, swap STDOUT and STDERR, colour STDOUT, swap back
  ( (eval "$(for phrase in "$@"; do echo -n "'$phrase' "; done)") 3>&1 1>&2 2>&3 | sed -e "s/^\(.*\)$/$(echo -en \\033)[31;1m\1$(echo -en \\033)[0m/") 3>&1 1>&2 2>&3
}

# Bash-only. Whatever.
# {{{
# Node Completion - Auto-generated, do not touch. (Fuck you, I touched it anyway. ~ ELLIOTTCABLE)
#for f in $(command ls ~/.node-completion); do
#  f="$HOME/.node-completion/$f"
#  test -f "$f" && . "$f"
#done
# }}}

debug_path_dump 'after'

# Create files as u=rwx, g=rx, o=rx
umask 022
