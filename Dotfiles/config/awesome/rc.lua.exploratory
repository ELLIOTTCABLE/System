-- Require `awesome`s standard library
require("awful")
require("beautiful")
require("shifty")


-- -----------------------------
-- ----< Variables >------------
-- Now, let's set some ground rules. These variables and functions will be used later throughout this configuration.

-- This is the key to which we delegate most controls. We'll default to a key that pretty much nothing else uses: Mod4.
-- (That's the "command" or "Apple" key on a Macintosh, or the "Windows" key on a Windows box.)
m = "Mod4"

-- These are our favourite layouts.
layouts = {
  awful.layout.suit.tile.bottom,
  awful.layout.suit.fair,
  awful.layout.suit.max,
  awful.layout.suit.max.fullscreen,
  awful.layout.suit.magnifier,
  awful.layout.suit.floating
}

-- And the theme!
theme = "wool"

-- We use this variable whenever we want to launch a terminal. You can change it to whatever terminal or command you would like.
terminal = "urxvtc"

-- We use this whenever we want a browser. You can change it to whatever browser or command you want.
browser = "firefox"

-- These commands are responsible for controlling the system. Remember to add entries similar to the following to the sudoers file for each setting below:
--   %users localhost=NOPASSWD: /sbin/shutdown -h now
suspend   = "sudo -n /usr/sbin/s2ram"
reboot    = "sudo -n /sbin/shutdown -fr now"
shutdown  = "sudo -n /sbin/shutdown -fhP now"


-- ============================ ============================ --
--  ========================== ! ==========================  --
-- ============================ ============================ --

-- -----------------------------
-- ----< Initialization >-------
-- Some useful functions.
function each_screen(lambda)
  for s = 1, screen.count() do lambda(s) end
end

-- Some things seem to assume the global variable "modkey" is set.
modkey = m

beautiful.init(awful.util.getdir("config") .. "/themes/" .. theme .. "/theme.lua")


-- -----------------------------
-- ----< Tags >-----------------
shifty.config.tags = {}

-- We're going to create a lobby for each screen.
each_screen(function(s)
  shifty.config.tags = awful.util.table.join(shifty.config.tags, {
    -- FIXME: Currently, Shifty seems to puke all over multiple init tags of the same name string, so we add the screen's number to each one. A bit ugly, though.
    [s .. " lobby"] = {init = true, persistent = true, screen = s}
  })
end)

shifty.config.apps = {
  -- {match = {"Gran Paradiso", "Firefox"}, tag = "web"},
  {match = {"xterm", "urxvt"} , honorsizehints = false, slave = true},
  {match = {""}, buttons = { -- TODO: Is this necessary?
    button({}, 1, function(c) client.focus = c, c:raise() end),
    button({m}, 1, function(c) awful.mouse.client.move() end),
    button({m}, 3, awful.mouse.client.resize)
  }}
}

shifty.config.defaults = {
  layout = layouts[1],
  ncol = 1,
  mwfact = 0.60,
  floatBars = true
}

shifty.init()

-- -----------------------------
-- ----< Bars >-----------------
-- First, a prompt
prompts = {}
prompt_configuration = {prompt = "> "}

-- Now, a taglist (supposedly, shifty will handle this for us!)
taglists = {}
taglist_configuration = {}
taglist_configuration.buttons = awful.util.table.join(
  awful.button({}, 1, awful.tag.viewonly),
  awful.button({m}, 1, function(tag) tag.selected = not tag.selected end),
  awful.button({}, 3, function(tag) awful.client.movetotag(tag); awful.tag.viewonly(tag) end),
  awful.button({m}, 3, awful.client.toggletag),
  awful.button({m, "Shift"}, 1, shifty.del)
)

-- And a tasklist
tasklists = {}
tasklist_configuration = {}
tasklist_configuration.display_function = function(s)
  return function(c) return awful.widget.tasklist.label.currenttags(c, s) end
end
tasklist_configuration.buttons = awful.util.table.join(
  awful.button({}, 1, function(c)
    -- First, we have to make a tag containing the client is visible. If not, we add the first of the clients' tags to the currently selected tags
    if not c:isvisible() then
      awful.client.toggletag(c:tags()[1])
    end
    -- Next, we focus on it and raise it
    client.focus = c
    c:raise()
  end),
  awful.button({m}, 1, function(tag) tag.selected = not tag.selected end),
  awful.button({}, 3, awful.client.movetotag),
  awful.button({m}, 3, awful.client.toggletag),
  awful.button({m, "Shift"}, 1, shifty.del)
)

-- Let's add a simple textbox for the current time as well.
time_box_configuration = {type = "textbox", align = "right", show_date = false}
time_box_configuration.format = {
  date = "%b, %d (%a) ",
  time = "%l:%M:%S %p",
  -- TODO: Do I need these escapes?
  open  = " <span face=\"Monospace\" weight=\"700\" size=\"large\">",
  close = "</span> "
}
time_box_configuration.buttons = {
  -- TODO: Why doesn't this work?
  awful.button({}, 1, function() time_box_configuration.show_date = not time_box_configuration.show_date end)
}
time_box_configuration.hook = function()
  -- TODO: Can we put this on one line?
  local date_field = ""
  if time_box_configuration.show_date then
    date_field = time_box_configuration.format.date
  end
  time_box.text = os.date(time_box_configuration.format.open .. date_field .. time_box_configuration.format.time .. time_box_configuration.format.close)
end

widget_bars = {}
widget_bar_configuration = {position = "top", ontop = true, fg = beautiful.fg_normal, bg = beautiful.bg_normal, height = 16}

task_bars = {}
task_bar_configuration = {position = "bottom", ontop = true, fg = beautiful.fg_normal, bg = beautiful.bg_normal, height = 16}

-- The following will be run for all screens
time_box = widget(time_box_configuration)
awful.hooks.timer.register(1, time_box_configuration.hook)
time_box_configuration.hook()

main_menu = awful.menu.new({items = {
  {"Terminal", terminal},
  {"Browser", browser},
  {"awesomewm", {
    {"Manual", function () awful.util.spawn(terminal .. "-e man awesome") end},
    {"Restart", awesome.restart}
  }},
  {"Arch Linux", {
    {"Log out", awesome.quit},
    {"Sleep", suspend},
    {"Reboot", reboot},
    {"Shut down", shutdown}
  }}
}})
main_launcher = awful.widget.launcher({menu = main_menu, image = image(beautiful.awesome_icon)})

tray = widget({type = "systray", align = "right"})  

-- The following will be run for each screen
each_screen(function(s)
  -- A bar (along the top) for widgets and tags and whatnot
  widget_bars[s] = wibox(widget_bar_configuration)
  
  prompts[s] = widget({type = "textbox", align = "left"})
  taglists[s] = awful.widget.taglist.new(s, awful.widget.taglist.label.all, taglist_configuration.buttons)
  
  widget_bars[s].widgets = {main_launcher, prompts[s], taglists[s], time_box}
  widget_bars[s].screen = s
  
  -- A bar (along the bottom) for active tasks
  task_bars[s] = wibox(task_bar_configuration)
  
  tasklists[s] = awful.widget.tasklist.new(tasklist_configuration.display_function(s), tasklist_configuration.buttons)
  
  task_bars[s].widgets = {tasklists[s], tray}
  task_bars[s].screen = s
end)

shifty.taglist = taglists


-- -----------------------------
-- ----< Input >----------------
-- Mouse buttons
root.buttons(awful.util.table.join(
  awful.button({}, 3, function() main_menu:toggle() end)
)) -- TODO: Can we remove this?

-- Global hotkeys
shifty.config.globalkeys = awful.util.table.join(
  awful.key({m           }, "Return", function () awful.util.spawn(terminal) end),
  awful.key({m, "Shift"  }, "q",      function () awful.util.spawn(shutdown) end),
  awful.key({m, "Shift"  }, "r",      function () awful.util.spawn(reboot) end),
  awful.key({m, "Shift"  }, "s",      function () awful.util.spawn(suspend) end),
  awful.key({m, "Control"}, "r",      awesome.restart),
  awful.key({m, "Control"}, "q",      awesome.quit),
  
  awful.key({m           }, "r", function()
    awful.prompt.run(prompt_configuration, prompts[mouse.screen], awful.util.spawn, awful.completion.shell, awful.util.getdir("cache") .. "/history")
  end)
)
 
for i=1, (shifty.config.maxtags or 9) do
  shifty.config.globalkeys = awful.util.table.join(shifty.config.globalkeys,
    awful.key({m                    }, i, function() local t = awful.tag.viewonly(shifty.getpos(i)) end),
    awful.key({m, "Control"         }, i, function()
      local t = shifty.getpos(i)
      t.selected = not t.selected
    end),
    awful.key({m, "Control", "Shift"}, i, function()
      if client.focus then
        awful.client.toggletag(shifty.getpos(i))
      end
    end),
    awful.key({m, "Shift"           }, i, function()
      if client.focus then
        local t = shifty.getpos(i)
        awful.client.movetotag(t)
        awful.tag.viewonly(t)
      end
    end)
  )
end

root.keys(shifty.config.globalkeys)

-- Client hotkeys
shifty.config.clientkeys = awful.util.table.join(
  
  -- Copy / Paste
  awful.key({m}, "c", function(c)
    -- TODO: I can't really think of a way to force a copy. I could just map this to ctrl-c, I guess, but then it'd be out of sync with mod4-v below.
    -- c.fake_input("button_press", 2)
    -- c.fake_input("button_release", 2)
  end),
  awful.key({m}, "v", function(c)
    -- TODO: This doesn't work, and I don't know why! It *should* simulate a middle click...
    c.fake_input("button_press", 2)
    c.fake_input("button_release", 2)
  end),
  
  -- Moves the currently focused client to a new tag all by its lonesome
  awful.key({m}, "Tab", function(c)
    local t = shifty.add()
    awful.client.movetotag(t, c)
  end)
  
)

-- -----------------------------
-- ----< Hooks >----------------
