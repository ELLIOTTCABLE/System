if !has('nvim')
   " Duplicate NeoVim's changes to Vim defaults, incase I start classic Vim for some reason
   " (See :help nvim-defaults)
   filetype plugin indent on

   set autoread autoindent backspace=indent,eol,start belloff=all complete-=i display=lastline \
       history=10000 hlsearch incsearch nolangremap nocompatible nrformats=bin,hex ruler
                \ sessionoptions-=options showcmd tabpagemax=50 ttyfast viminfo+=",!"
                \ wildmenu

   set encoding=utf-8
endif

if $XDG_SYNC_HOME != ''
   let s:xdg_sync_home = $XDG_SYNC_HOME . '/nvim'
elseif $XDG_DATA_HOME != ''
   let s:xdg_sync_home = substitute($XDG_DATA_HOME, 'share', 'sync', '')
else
   let s:xdg_sync_home = substitute(stdpath('data'), 'share', 'sync', '')
endif

execute "set shadafile=" . simplify(s:xdg_sync_home . '/shada/main.shada')
let g:startify_session_dir = simplify(s:xdg_sync_home . '/session')

set hidden
set textwidth=100 wrapmargin=3 nojoinspaces
set cursorline colorcolumn=+1,+2,+3
set splitbelow splitright
set number signcolumn=yes
set smarttab expandtab tabstop=8 softtabstop=3 shiftwidth=3 shiftround
set smartcase ignorecase

set nowrap
set virtualedit=block
set listchars=tab:»─,extends:›,precedes:‹,nbsp:·
set breakindent showbreak=↪\     " For `set wrap linebreak`

set ignorecase smartcase gdefault

set scrolloff=3
set title

set completeopt=longest,menuone,preview

set conceallevel=1

set foldminlines=3

" This is overridden in the vim-lightline configuration below.
if exists('g:gui_oni')
   " If using Oni's externalized statusline, hide vim's native statusline
   set noruler laststatus=0 noshowcmd noshowmode
else
   set showtabline=2 laststatus=2 cmdheight=2 showmode
endif

syntax on

" NOTE: Swap this to iterate on the Merlin vim-plugin
let g:use_own_merlin     = v:false
let g:use_languageclient = v:false


" `vim-plug` installation & package-loading
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  au VimEnter * PlugInstall --sync | source $MYVIMRC
endif

source ~/.vim/packages.vim


" ### Variable declarations
if !exists('g:lightline') | let g:lightline = {} | endif
if !exists('g:LanguageClient_serverCommands') | let g:LanguageClient_serverCommands = {} | endif
if !exists('g:leader_key_map') | let g:leader_key_map = {} | endif
if !exists('g:localleader_key_map') | let g:localleader_key_map = {} | endif

" FIXME: ... when was this supposed to get called?
function! s:FixConfigurationForLightline()
   if exists('g:loaded_lightline')
      set laststatus=2 cmdheight=1 noshowmode
   endif
endfunction

function! s:SetupSolarized()
   let g:solarized_use16 = 1

   let g:colorschemes = {
    \ 'dark':  'typewriter-night',
    \ 'light': 'solarized8',
    \ 'lightline': {
    \    'dark': 'deus',
    \    'light': 'solarized'
    \ }
    \ }
endfunction

function! s:SetupNord()
   let g:nord_italic_comments = 1
   let g:nord_uniform_diff_background = 1
   let g:nord_cursor_line_number_background = 1

   let g:colorschemes = {
    \ 'dark':  'nord',
    \ 'light': 'base16-atelier-lakeside-light',
    \ 'lightline': {
    \    'dark': 'nord',
    \    'light': 'PaperColor_light'
    \ }
    \ }
endfunction

" Finally, I actually configure, and invoke, the color-switcher.
if exists('g:gui_oni')
   call s:SetupNord()
elseif has('gui_vimr')
   call s:SetupNord()

   call togglebg#("dark")
else
   call s:SetupSolarized()

   let g:seiya_auto_enable = 1
   call togglebg#("dark")
endif


" Command-line tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.class,.svn

if has("mouse")
   set mouse=a

   if !has('nvim') && &term == 'screen'
      " tmux knows the extended mouse mode
      set ttymouse=xterm2
   endif

   if !has('nvim') && v:version >= 704 && &term =~ '^screen'
      " Odds are good that this is a modern tmux, so let's pick the best mouse-handling mode.
      set ttymouse=sgr
   endif

   " These break the Markdown plugin o_O
  "map <ScrollWheelUp> <C-Y>
  "map <ScrollWheelDown> <C-E>
endif

let g:python3_host_prog = '/usr/local/bin/python3'

if executable("ag")
  "set grepprg=ag\ --nogroup\ --nocolor
   set grepprg=ag\ --vimgrep\ --nocolor
   let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

" This only affects programs entered *inside `:terminal` windows*; I also separately configured Git
" to open a new `nvim` via `nvr`:
"
"    git config --global core.editor 'nvr -s --remote-wait-silent'
if has('nvim')
   let $VISUAL = 'nvr -cc split --remote-wait'
endif

augroup setup-terminal-settings | au!
   au TermOpen * setlocal nonumber
   au TermOpen * startinsert
augroup END

" Fill these functions to tie other plugins into focus-mode
function! s:goyo_enter()
   " ...
endfunction

function! s:goyo_leave()
   " ...
endfunction

" These autocmds self-unique, thanks to the `!`
au! User GoyoEnter nested call <SID>goyo_enter()
au! User GoyoLeave nested call <SID>goyo_leave()

"au FileType c,cpp nested :TagbarOpen
"
"
" === Styles ===
let g:solarized_visibility = "high"

" Colourize trailing whitespace
hi ShowTrailingWhitespace ctermbg=Red guibg=Red

" Obscure the iconic vim 'empty-line tildes'
" FIXME: VimR appears to reliably crash, with these?
if !has('gui_vimr') && !exists('g:gui_oni')
   hi EndOfBuffer ctermbg=fg
   hi! link EndOfBuffer SignColumn
endif

"if &diff
"   let g:color_coded_enabled = 0
"endif


" === Commands ===
" From https://stackoverflow.com/questions/4545275/vim-close-all-buffers-but-this-one#comment86214068_42071865
command! BufOnly silent! execute "%bd|e#|bd#"

command! Gin Gcommit
command! Giff Gdiff
command! Stiff Gdiff --cached
"command! Go Gcheckout  " The semantics of these are different enough, that I've opted to omit them.
"command! Gad Gcheckout
command! Gush Gpush
command! Ganch Twiggy

command! -nargs=0 Format   :call CocAction('format')
command! -nargs=0 Prettier :CocCommand prettier.formatFile
command! -nargs=? Fold     :call CocAction('fold', <f-args>)
command! -nargs=0 OR       :CocCommand editor.action.organizeImport


" === Mappings ===
" Thanks, Damian. http://ell.io/i6io1
nnoremap ; :
nnoremap ; :

nnoremap ;; ;
vnoremap ;; ;

nnoremap ,, ,
vnoremap ,, ,

" Fuck '.
nnoremap ' `
nnoremap ` '

" These make movement commands “work” with `o`, such as `3o` to insert inject lines and switch to insert mode.
"nnoremap o o<Esc>S        " ... unfortunately, they break yanking.
"nnoremap O O<Esc>'[S

" See `:help Y`
map Y y$

" #### Global mappings
for map_command in ['noremap', 'noremap!', 'tnoremap']
   " When it comes to windows, I don't like how _ and = (which are related mappings) and - and +
   " (also related) require different shift-keying. Thus, I'm swapping them — unshifted '-' and '='
   " for one purpose, and shifted '_' and '+' for another.
   execute map_command . ' <silent> <C-w>- <C-\><C-n><C-w>_'
   execute map_command . ' <silent> <C-w>_ <C-\><C-n><C-w>-'

   " Duplicate some macOS bindings in the GUI
   if has('gui_vimr')
      " “⌘ -T” maps to “fuzzy-open file” in many macOS text-editors
      " FIXME: this needs to be remapped, oops
      " REPORTME: VimR pre-maps ⌘ -T.
      execute map_command . ' <silent> <D-t> <C-\><C-n><C-p>'

      " ⇧ ⌘ [ / ] navigates tabpages in every other macOS application, so,
      execute map_command . ' <silent> <S-D-}> <C-\><C-n>gt'
      execute map_command . ' <silent> <S-D-{> <C-\><C-n>gT'
   endif
endfor

" pear-tree default mappings, disabled by g:pear_tree_map_special_keys below.
imap <BS> <Plug>(PearTreeBackspace)
imap <Esc> <Plug>(PearTreeFinishExpansion)
" <CR> overloaded for coc.nvim below
" imap <CR> <Plug>(PearTreeExpand)

" Mapping <Tab> as indicated by coc.nvim's README
inoremap <silent><expr> <TAB>
   \ pumvisible() ? coc#_select_confirm() :
   \ coc#expandableOrJumpable() ?
   \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
   \ <SID>check_back_space() ? "\<Tab>" :
   \ coc#refresh()

function! s:check_back_space() abort
   let col = col('.') - 1
   return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<Tab>'
let g:coc_snippet_prev = '<S-Tab>'

inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <CR> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
inoremap <Plug>(CocOnEnter) <C-r>=coc#on_enter()<CR>
if exists('*complete_info')
  imap <silent><expr> <CR> complete_info()["selected"] != "-1" ? coc#_select_confirm()
           \: "\<C-g>u\<Plug>(PearTreeExpand)\<Plug>(CocOnEnter)"
else
  imap <silent><expr> <CR> pumvisible() ? coc#_select_confirm()
           \: "\<C-g>u\<Plug>(PearTreeExpand)\<Plug>(CocOnEnter)"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> [G <Plug>(coc-diagnostic-prev-error)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> ]G <Plug>(coc-diagnostic-next-error)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)<Plug>(searchhi-update)
nmap <silent> gy <Plug>(coc-type-definition)<Plug>(searchhi-update)
nmap <silent> gi <Plug>(coc-implementation)<Plug>(searchhi-update)
nmap <silent> gr <Plug>(coc-references)<Plug>(searchhi-update)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Stacking up vim-searchhi and vim-asterisk, as a superior replacement for easymotion's incsearch
nmap / <Plug>(searchhi-/)
nmap ? <Plug>(searchhi-?)
nmap n <Plug>(searchhi-n)
nmap N <Plug>(searchhi-N)

nmap gd <Plug>(searchhi-gd)
nmap gD <Plug>(searchhi-gD)

vmap / <Plug>(searchhi-v-/)
vmap ? <Plug>(searchhi-v-?)
vmap n <Plug>(searchhi-v-n)
vmap N <Plug>(searchhi-v-N)

vmap gd <Plug>(searchhi-v-gd)
vmap gD <Plug>(searchhi-v-gD)

map *   <Plug>(asterisk-*)<Plug>(searchhi-update)
map #   <Plug>(asterisk-#)<Plug>(searchhi-update)
map g*  <Plug>(asterisk-g*)<Plug>(searchhi-update)
map g#  <Plug>(asterisk-g#)<Plug>(searchhi-update)

map z*  <Plug>(asterisk-z*)<Plug>(searchhi-update)
map z#  <Plug>(asterisk-z#)<Plug>(searchhi-update)
map gz* <Plug>(asterisk-gz*)<Plug>(searchhi-update)
map gz# <Plug>(asterisk-gz#)<Plug>(searchhi-update)


" The global <Leader> is the spacebar. This primarily covers the EasyMotion invocations, but also
" includes some other global-plugin features.
let mapleader = " "
let maplocalleader = ","

let g:EasyMotion_do_mapping = 0
" EasyMotion stomps:
"   - fF, tT, wW, bB, eE, geE, j, k, nN, s,
"map <Leader> <Plug>(easymotion-prefix)

" I chose to stomp the non-<Leader> versions for fF and tT, but not for wW/bB/eE/geE, because it's more
" useful to spam the latter (as in `wwwww`). Theoretically, EasyMotion should *supplant* that
" behaviour; but realistically, I still use the latter thanks to muscle-memory.
nmap f <Plug>(easymotion-fl)|xmap f <Plug>(easymotion-fl)|omap f <Plug>(easymotion-fl)
nmap F <Plug>(easymotion-Fl)|xmap F <Plug>(easymotion-Fl)|omap F <Plug>(easymotion-Fl)
nmap t <Plug>(easymotion-tl)|xmap t <Plug>(easymotion-tl)|omap t <Plug>(easymotion-tl)
nmap T <Plug>(easymotion-Tl)|xmap T <Plug>(easymotion-Tl)|omap T <Plug>(easymotion-Tl)


" Since the within-line searches are handled by non-prefixed mappings above, I use the <Leader>-
" prefixed mappings for bidirectional/overwin-mode:
" mnemonic: 'sneak'
nmap <Leader>s <Plug>(easymotion-overwin-f2)
xmap <Leader>s <Plug>(easymotion-bd-f2)
omap <Leader>s <Plug>(easymotion-bd-f2)
let g:leader_key_map.s = 'motion-2sneak'

" This makes <Leader>-k and <Leader>-b a little inconsistent, but I prefer the extra mapping-
" mnemonic space.
nmap <Leader>j <Plug>(easymotion-overwin-line)
xmap <Leader>j <Plug>(easymotion-bd-jk)
omap <Leader>j <Plug>(easymotion-bd-jk)
"nmap <Leader>k <Plug>(easymotion-overwin-line)
"xmap <Leader>k <Plug>(easymotion-bd-jk)
"omap <Leader>k <Plug>(easymotion-bd-jk)
let g:leader_key_map.j = 'motion-line'

" And finally, since `w` and `e` match so many words, especially bidirectionally, I leave them
" prefixed *and* window-bound.
nmap <Leader>w <Plug>(easymotion-bd-w)
xmap <Leader>w <Plug>(easymotion-bd-w)
omap <Leader>w <Plug>(easymotion-bd-w)
"nmap <Leader>b <Plug>(easymotion-bd-w)
"xmap <Leader>b <Plug>(easymotion-bd-w)
"omap <Leader>b <Plug>(easymotion-bd-w)
let g:leader_key_map.w = 'motion-word'

" <Space><Space> → jump-to-anywhere
map <Leader><Leader> <Plug>(easymotion-lineanywhere)
let g:leader_key_map[' '] = 'motion-anywhere'


nmap <Leader>n <Plug>(easymotion-bd-n)
xmap <Leader>n <Plug>(easymotion-bd-n)
omap <Leader>n <Plug>(easymotion-bd-n)
let g:leader_key_map.n = 'motion-search'

" Complete an EasyMotion by hitting <Space> again
augroup easymotion-keymap | au!
   au VimEnter * EMCommandLineNoreMap <Space> <CR>
augroup END


"noremap  <silent> <F1>          :<C-u>NERDTreeTabsToggle<Return>
"inoremap <silent> <F1>     <C-O>:<C-u>NERDTreeTabsToggle<Return>
"vnoremap <silent> <F1>     <Esc>:<C-u>NERDTreeTabsToggle<Return>
"noremap  <silent> <F2>          :<C-u>GundoToggle<Return>
"inoremap <silent> <F2>     <C-O>:<C-u>GundoToggle<Return>
"vnoremap <silent> <F2>     <Esc>:<C-u>GundoToggle<Return>
"noremap  <silent> <F3>          :<C-u>TagbarToggle<Return>
"inoremap <silent> <F3>     <C-O>:<C-u>TagbarToggle<Return>
"vnoremap <silent> <F3>     <Esc>:<C-u>TagbarToggle<Return>

noremap  <silent> <F8>          :<C-u>set spell!<Return>
inoremap <silent> <F8>     <C-O>:<C-u>set spell!<Return>
vnoremap <silent> <F8>     <Esc>:<C-u>set spell!<Return>

" F9 to toggle focus-mode
nmap <silent> <F9>  :Goyo<cr>
imap <silent> <F9>  <C-O><F9>

" F11 to toggle the signcolumn (‘gutter’)
nmap <silent> <F11> :exec &signcolumn == "no" ? "set signcolumn=yes" : "set signcolumn=no"<cr>
imap <silent> <F11> <C-O><F11>

" F12 to toggle hilight, Shift-F12 to clear search register
nmap <silent> <F12> :silent set invhls<CR>
imap <silent> <F12> <C-O><F12>
map  <silent> <S-F12> :let @/ = @_<CR>
imap <silent> <S-F12> <C-O><S-F12>

" Toggle conealing with <Space>-c
map <Leader>c :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
let g:leader_key_map.c = 'toggle-conceal'

" Toggle highlighting of trailing whitespace with <Space>-zs
" mnemonic: 'whiteZpace'
nnoremap <silent> <Leader>zs :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>echo (ShowTrailingWhitespace#IsSet() ? 'Show trailing whitespace' : 'Not showing trailing whitespace')<CR>
nnoremap <silent> <Leader>zx :DeleteTrailingWhitespace<CR>
let g:leader_key_map.z = {
 \    'name':  '+trailing-whitespace'
 \  , 's':     'toggle'
 \  , 'x':     'delete'
 \ }

nnoremap <silent> <Leader>x :Sayonara<CR>
let g:leader_key_map.x = 'Sayonara'

" <Ctrl-P> for both switching between buffers, and opening new ones!
nnoremap <C-p> :<C-u>Denite -default-action=switch -source-names=hide buffer file_mru file/rec<CR>

" (Need to remap ControlP, so it doesn't stomp on the above Denite mapping.)
let g:ctrlp_map = '<c-o>'

nmap <Leader>id <Plug>(coc-diagnostic-info)

let g:leader_key_map.i = {
 \    'name':  '+info'
 \  , 'd':     'show-diagnostic'
 \ }

function! s:cocActionsOpenFromSelected(type) abort
   execute 'CocCommand actions.open ' . a:type
endfunction
xnoremap <silent> <Leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
noremap <silent> <Leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@

nnoremap <silent> <Leader>y   :<C-u>CocList -A --normal yank<CR>
let g:leader_key_map.y = 'show-coc-yank'

nnoremap <Leader>/            :<C-u>Denite grep:. -search<CR>
nnoremap <Leader>8            :<C-u>DeniteCursorWord grep:. -search<CR>
nnoremap <Leader>*            :<C-u>DeniteCursorWord grep:. -search<CR>
let g:leader_key_map['/'] =   'find-files'
let g:leader_key_map['8'] =   'find-cursor-word'

nnoremap <Leader>ff           :<C-u>DeniteBufferDir file/rec<CR>
"nnoremap <Leader>ss          :<C-u>DeniteBufferDir buffer<CR>

"nnoremap <Leader>fl           :<C-u>Denite location_list -no-empty<CR>
nnoremap <Leader>fc           :<C-u>Denite command_history<CR>
nnoremap <Leader>f"           :<C-u>Denite register<CR>
nnoremap <Leader>f=           :<C-u>Denite spell<CR>
nnoremap <Leader>f]           :<C-u>Denite outline<CR>

nnoremap <Leader>fh           :<C-u>Denite help<CR>

let g:leader_key_map.f = {
 \    'name':  '+find'
 \  , 'f':     'find-file'
 \  , 'c':     'find-command'
 \  , 'h':     'find-help'
 \  , '"':     'find-register'
 \  , '=':     'find-spelling'
 \  , ']':     'find-tag'
 \ }

let g:windowswap_map_keys = 0
nmap <silent> <Leader>ww :<C-u>call WindowSwap#EasyWindowSwap()<CR>
nmap <silent> <Leader>wb <Plug>ToggleBackground

let g:leader_key_map.w = {
 \    'name':  '+window'
 \  , 'g':     'toggle-background'
 \  , 'w':     'window-swap'
 \ }

" NOTE: Lots of other textobj-mappings, see `packages.vim`
let g:textobj_matchit_no_default_key_mappings = 1
xmap a% <Plug>(textobj-matchit-a)
omap a% <Plug>(textobj-matchit-a)
xmap i% <Plug>(textobj-matchit-i)
omap i% <Plug>(textobj-matchit-i)

" TODO: Find mappings for all these, or the coc-denite versions thereof.
"" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap iC <Plug>(coc-classobj-i)
omap iC <Plug>(coc-classobj-i)
xmap aC <Plug>(coc-classobj-a)
omap aC <Plug>(coc-classobj-a)

nmap <Leader>N <Plug>(coc-range-select)
xmap <Leader>N <Plug>(coc-range-select)
let g:leader_key_map['N'] =   'extend-selection'

" Formatting selected code.
xmap <silent> <leader>rf <Plug>(coc-format-selected)
nmap <silent> <leader>rf <Plug>(coc-format-selected)

" Apply AutoFix to problem on the current line.
nmap <Leader>rx <Plug>(coc-fix-current)

" Symbol renaming.
nmap <Leader>rn <Plug>(coc-rename)

" Symbol alignment
nnoremap <Leader>r/ :Tabularize /

let g:leader_key_map.r = {
 \    'name':  '+refactor'
 \  , 'n':     'rename'
 \  , 'f':     'reformat'
 \  , 'x':     'autofix'
 \  , '/':     'search-and-align'
 \ }

" These default to `[c`, `]c`, `ic`, and `ac`; but the latter conflicts with TComment.
let g:gitgutter_map_keys = 0
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)

omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" Thanks to disabling `gitgutter_map_keys`, I also have to re-define these to their defaults.
nmap <Leader>hp <Plug>(GitGutterPreviewHunk)
nmap <Leader>hs <Plug>(GitGutterStageHunk)
nmap <Leader>hu <Plug>(GitGutterUndoHunk)
let g:leader_key_map.h = {
 \    'name':  '+git-hunk'
 \  , 'p':     'preview-hunk'
 \  , 's':     'stage-hunk'
 \  , 'u':     'unstage-hunk'
 \ }

nmap <Leader>wc :tcd %:h<CR>
let g:leader_key_map.w = {
 \    'name':  '+win'
 \  , 'c':     'update-tab-cwd'
 \ }

" Mappings in Denite modals
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
   nnoremap <silent><buffer><expr>  <CR>     denite#do_map('do_action')
   nnoremap <silent><buffer><expr>  <Space>  denite#do_map('toggle_select').'j'
   nnoremap <silent><buffer><expr>  a        denite#do_map('choose_action')
   nnoremap <silent><buffer><expr>  d        denite#do_map('do_action', 'delete')
   nnoremap <silent><buffer><expr>  p        denite#do_map('do_action', 'preview')
   nnoremap <silent><buffer><expr>  i        denite#do_map('open_filter_buffer')
   nnoremap <silent><buffer><expr>  <Esc>    denite#do_map('quit')

   " (Chosen to match the easymotion-bd-jk mapping)
   " nnoremap <silent><buffer><expr> <Leader>j denite#do_map('quick_move')
   map <silent><buffer>          <Leader>j   <Plug>(easymotion-sol-j)
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
   map  <silent><buffer>         <CR>        <Plug>(denite_filter_update)
   imap <silent><buffer>         <CR>        <Plug>(denite_filter_update)
   vmap <silent><buffer>         <CR>        <Plug>(denite_filter_update)

   map  <silent><buffer>         <Esc>       <Plug>(denite_filter_update)
   imap <silent><buffer>         <Esc>       <Plug>(denite_filter_update)

   map  <silent><buffer>         <C-c>       <Plug>(denite_filter_quit)
   imap <silent><buffer>         <C-c>       <Plug>(denite_filter_quit)

   " (Chosen to match the easymotion-bd-jk mapping)
   nmap <silent><buffer> <Leader>j <Plug>(denite_filter_update)<Plug>(easymotion-bd-jk)
endfunction
"call denite#custom#map('insert', '<Esc>', '<denite:enter_mode:normal>',          'noremap')
"call denite#custom#map('normal', '<Esc>', '<NOP>',                               'noremap')
"
"call denite#custom#map('_',      '<C-t>', '<denite:do_action:tabswitch>',        'noremap')
"call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabswitch>',        'noremap')
"
"call denite#custom#map('_',      '<C-s>', '<denite:do_action:splitswitch>',      'noremap')
"call denite#custom#map('_',      '<C-v>', '<denite:do_action:vsplitswitch>',     'noremap')
"call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplitswitch>',     'noremap')
"
"
"
"call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>',          'noremap')
"call denite#custom#map('normal', '<C-j>', '<denite:move_to_next_line>',          'noremap')
"call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>',      'noremap')
"call denite#custom#map('normal', '<C-k>', '<denite:move_to_previous_line>',      'noremap')
"
"call denite#custom#map('insert', '<C-n>', '<denite:assign_next_matched_text>',   'noremap')
"call denite#custom#map('insert', '<C-p>', '<denite:assign_previous_matched_text>', 'noremap')
"
"" ... w...why are these missing ...
"call denite#custom#map('normal', 'dw',    '<denite:delete_word_after_caret>',    'noremap')
"call denite#custom#map('normal', '^',     '<denite:move_caret_to_lead>',         'noremap')

" Make Denite results less fugly
hi link deniteMatchedChar Special

" Write files, by default
augroup focus-loss-auto-write | au!
   au BufLeave,FocusLost * silent! wall
augroup END

augroup coc | au!
   " Update signature help on jump placeholder.
   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

   " Update lightline-statusline
   autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
augroup END

"" gist-vim defaults
"if has("mac")
"  let g:gist_clip_command = 'pbcopy'
"elseif has("unix")
"  let g:gist_clip_command = 'xclip -selection clipboard'
"endif
"let g:gist_detect_filetype = 1
"let g:gist_open_browser_after_post = 1

set undofile
set undolevels=10000

" Directories for swp files
set directory=~/.vim/swap//
set backupdir=.,~/.vim/backup
set undodir=~/.vim/undo

" suggested by vim-gitgutter
set updatetime=250

"set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

"" The markdown.vim ftplugin supports ```this kind of syntax-hilighting fence
let g:markdown_fenced_languages = [ 'c', 'objc', 'make', 'sh'
                                \, 'html', 'css', 'xml'
                                \, 'js=javascript', 'coffee', 'json'
                                \, 'ruby', 'python', 'lisp', 'scheme', 'haskell'
                                \, 'vim', 'help' ]


" === Filetypes ===
" #### Extensions
augroup filetypes | au!
   au BufNewFile,BufFilePre,BufRead *.md
    \ set filetype=markdown

   au BufNewFile,BufFilePre,BufRead {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}
    \ set filetype=ruby

   au BufNewFile,BufFilePre,BufRead *.pegjs
    \ set filetype=pegjs

   au BufNewFile,BufFilePre,BufRead {*profile,*zlogin,*zlogout,*shrc,*shenv}
    \ set filetype=zsh

   " Like, I'm supposed to put these in separate files, but lol no thx?
   au FileType gitcommit set wrap tw=0

   " To fold by indentation in CoffeeScript files, but don't enable by default. (`zi` to enable)
   au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
augroup END

" ### JavaScript / etc
augroup javascript | au!
   au FileType javascript,typescript,json setl formatexpr=CocAction('formatSelected')
augroup END

" #### OCaml
" Disable Merlin's built-in maps
let g:no_ocaml_maps=1

let g:LanguageClient_serverCommands.reason = ['ocaml-language-server', '--stdio']
let g:LanguageClient_serverCommands.ocaml  = ['ocaml-language-server', '--stdio']

let g:LanguageClient_autoStart = v:true

" ### Haskell
augroup javascript | au!
   au FileType haskell setl formatexpr=CocAction('formatSelected')
augroup END


"" === Plugins ===
" #### Startify
if getcwd() ==# $HOME
   let g:startify_list_order = [
    \    ['Recent files:'], 'files',
    \    ['Bookmarks:'], 'bookmarks',
    \    ['Sessions:'], 'sessions',
    \    ['Shortcuts:'], 'commands'   ]
   let g:startify_files_number = 20
else
   let g:startify_list_order = [
    \    ['Recent files in current directory:'], 'dir',
    \    ['Recent files elsewhere:'], 'files',
    \    ['Bookmarks:'], 'bookmarks',
    \    ['Sessions:'], 'sessions',
    \    ['Shortcuts:'], 'commands'   ]
   let g:startify_files_number = 10
endif
let g:startify_bookmarks = [ '~/.vimrc', '~/.zshrc' ]
let g:startify_commands = [ ':help reference', ':PlugUpdate', [':VTerm', ':exe "105VTerm" | set wfw'] ]

let g:startify_skiplist = [
 \    'COMMIT_EDITMSG',
 \    escape(fnamemodify(resolve($VIMRUNTIME), ':p'), '\') .'doc',
 \    '/usr/local/Cellar/neovim/.*/runtime/doc',
 \    'plugged/.*/doc',
 \ ]

let g:startify_fortune_use_unicode = 1
let g:startify_update_oldfiles = 1
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_use_env = 1

let g:startify_custom_indices = ['a', 'd', 'f', 'h', 'l', 'w', 'r', 'y', 'o', 'p', 'z', 'x', 'c',
 \ 'n', 'm', ',', 'A', 'D', 'F', 'H', 'L', 'W', 'R', 'Y', 'O', 'P', 'Z', 'X', 'C', 'N']

" ### vim-which-key
augroup my-which-key | au!
   autocmd  FileType which_key set laststatus=0 noshowmode noruler
   \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

call which_key#register('<Space>', "g:leader_key_map")
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>

call which_key#register(',', "g:localleader_key_map")
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>
vnoremap <silent> <localleader> :<c-u>WhichKeyVisual  ','<CR>

" #### Goyo
let g:goyo_width = 100

" #### searchhi
let g:searchhi_clear_all_asap = 1

" #### Fugitive
augroup my-fugitive | au!
   autocmd BufReadPost fugitive://* set bufhidden=delete
   autocmd User fugitive
    \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
    \   nnoremap <buffer> .. :edit %:h<CR> |
    \ endif
augroup END

" #### twiggy
let g:twiggy_local_branch_sort = 'mru'
let g:twiggy_remote_branch_sort = 'date'

" #### editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_max_line_indicator = "exceeding"

" #### ack.vim / Ripgrep
if executable("rg")
   let g:ackprg = 'rg --vimgrep --no-heading'
   set grepprg=rg\ --vimgrep\ --no-heading
   set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" #### Denite
call denite#custom#option('_', {
\    'prompt':         '❯'
\  , 'start_filter':   v:true
\  , 'auto_resize':    v:true
\  , 'ignorecase':     v:false
\  , 'smartcase':      v:true
\  , 'source_names':   'short'
\  , 'split':          'floating'
\  , 'filter-split-direction': 'floating'
\ })

autocmd VimEnter *   call s:denite_resized()
autocmd VimResized * call s:denite_resized()
function! s:denite_resized() abort
   if &columns >= 200
      call denite#custom#option('_', { 'vertical_preview': v:true })
   else
      call denite#custom#option('_', { 'vertical_preview': v:false })
   endif
endfunction

call denite#custom#source('file/rec', 'matchers', ['matcher/cpsm'])
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

call denite#custom#var('grep',     'command', ['rg'])
call denite#custom#var('grep',     'default_opts', ['--hidden', '--vimgrep', '--no-heading', '-S'])
call denite#custom#var('grep',     'recursive_opts', [])
call denite#custom#var('grep',     'pattern_opt', ['--regexp'])
call denite#custom#var('grep',     'separator', ['--'])
call denite#custom#var('grep',     'final_opts',   [])

call denite#custom#alias('source', 'file/rec/git', 'file/rec')
call denite#custom#var('file/rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])

call denite#custom#source('grep', 'args', ['', '', '!'])


" Disable the vim-devicons plugin, as it's rather broken:
let g:webdevicons_enable_denite = 0

" #### cpsm (matcher for Denite)
"let g:cpsm_match_empty_query = 0

" #### neomru (also Denite)
let g:neomru#filename_format = ':.'

" #### EasyMotion
let g:EasyMotion_prompt = '❯ '
let g:EasyMotion_enter_jump_first = 1

" `ff` will include 'F' in the options, `f\` will include '|', etc.
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1

" All matches will be upper-case ('S'), but the lower-case key will jump to them ('s')
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ASDGHKLQWERTYUIOPZXCVBNMFJ;'   " The defaults, capitalized for use_upper

" #### incsearch.vim
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#consistent_n_direction = 1
let g:incsearch#do_not_save_error_message_history = 1

let g:incsearch#magic = '\v' " very magic

"let NERDChristmasTree = 1
"let NERDTreeShowBookmarks = 1
"let NERDTreeBookmarksFile = '.NERDTreeBookmarks'
"let NERDTreeMouseMode = 2
"let NERDTreeSortOrder = ['\/$', '\.h$', '*']
"let NERDTreeWinPos = 'right'
"let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows = 1
"let NERDTreeWinSize = 25
"
"let NERDBlockComIgnoreEmpty = 0
"let NERDSpaceDelims = 1
"let NERDCompactSexyComs = 1
"let NERDDefaultNesting = 0
"
"let g:CommandTMaxCachedDirectories = 0
"let g:CommandTMaxHeight = 10
"let g:CommandTMatchWindowReverse = 1
"let g:CommandTScanDotDirectories = 1  " `:set wildignore` handles this better.
"
""let g:CoffeeAutoTagIncludeVars=1
"
"" #### vim-javascript
"let g:javascript_plugin_jsdoc = 1
"let g:javascript_plugin_flow  = 1
"
"let g:javascript_conceal_function         = "ƒ"
"let g:javascript_conceal_this             = "@"
"let g:javascript_conceal_arrow_function   = "⇒"

" #### lightline.vim
if !exists('g:lightline.enable') | let g:lightline.enable = {} | endif

let g:lightline.active = {
 \    'left':  [  ['mode', 'paste'],
 \                ['bufnum', 'filename', 'readonly',  'modified'],
 \                ['gitbranch', 'cocstatus'],  ],
 \    'right': [  ['charvaluehex', 'lineinfo'],
 \                ['percent'],
 \                ['fileencoding', 'fileformat', 'filetype'],  ],
 \ }
let g:lightline.inactive = {
 \    'left':  [  [], [ 'bufnum', 'filename' ]  ],
 \    'right': [  [ 'lineinfo' ],
 \                [ 'percent' ],  ],
 \ }

let g:lightline.tabline = {
 \    'left':  [  ['tabs'],  ],
 \    'right': [  ['close'],  ],
 \ }
let g:lightline.tab = {
 \    'active':   ['tabnum', 'filename', 'modified'],
 \    'inactive': ['tabnum', 'filename', 'modified'],
 \ }

"let g:lightline.separator =           { 'left': "\uE0B0", 'right': "\uE0B2" } " angles
"let g:lightline.separator =           { 'left': "\u259B", 'right': "\u259F" } " OCR
let g:lightline.separator =            { 'left': "\u2590\u2595", 'right': "\u258F\u258C" } " blocks

let g:lightline.subseparator =         { 'left': "\uFE19", 'right': "\uFE19" } " vert ellipsis
"let g:lightline.subseparator =        { 'left': "\u259E", 'right': "\u259E" } " OCR
"let g:lightline.subseparator =        { 'left': "\u276F", 'right': "\u276E" } " angle brackets
"let g:lightline.subseparator =        { 'left': "\u00A6", 'right': "\u00A6" } " broken bar

let g:lightline.tabline_separator =    {}
let g:lightline.tabline_subseparator = {}

let g:lightline.component = {
 \    'charvaluehex': "%2B",
 \    'lineinfo': "\uE0A1%-3l\uE0A3%-2v",
 \ }
let g:lightline.component_function = {
 \    'mode':        'LightlineMode',
 \    'readonly':    'LightlineReadonly',
 \    'modified':    'LightlineModified',
 \    'fileencoding': 'LightlineFileencoding',
 \    'fileformat':  'LightlineFileformat',
 \    'filetype':    'LightlineFiletype',
 \    'gitbranch':   'fugitive#Statusline',
 \    'cocstatus':   'coc#status',
 \ }

let g:lightline.component_visible_condition = {
 \    'modified': '(&modified||!&modifiable)&&!IsWeirdBuffer()',
 \    'readonly': '&readonly&&!IsWeirdBuffer()',
 \    'paste': '&paste',
 \    'spell': '&spell',
 \    'fileencoding': '!IsWeirdBuffer()',
 \    'fileformat': '!IsWeirdBuffer() && winwidth(0) >=# g:lightline_thin_width',
 \    'filetype': '!IsWeirdBuffer() && winwidth(0) >=# g:lightline_thin_width',
 \ }


let g:lightline_wide_width = 100
let g:lightline_thin_width = 80

function! IsWeirdBuffer()
   return &filetype =~# '\v(startify|denite)'
endfunction

function! LightlineModified()
   return (&modified || !&modifiable) && !IsWeirdBuffer() ? "\uF040" : ''
endfunction

function! LightlineReadonly()
   return &readonly && !IsWeirdBuffer() ? 'RO' : ''
endfunction

function! LightlineFileencoding()
   if IsWeirdBuffer()
      return ''

   elseif winwidth(0) >=# g:lightline_thin_width
      return &fileencoding !=# "" ? &fileencoding : &encoding " Always 'utf-8' in NeoVim
   else
      return ''
   endif
endfunction

if !exists('*WebDevIconsGetFileTypeSymbol')
   function! WebDevIconsGetFileTypeSymbol()
      return ''
   endfunction
   function! WebDevIconsGetFileFormatSymbol()
      return ''
   endfunction
endif

function! LightlineFileformat()
   if IsWeirdBuffer()
      return ''

   elseif winwidth(0) >=# g:lightline_wide_width
      return WebDevIconsGetFileFormatSymbol() . &fileformat
   elseif winwidth(0) >=# g:lightline_thin_width
      return WebDevIconsGetFileFormatSymbol()
   else
      return ''
   endif
endfunction

function! LightlineFiletype()
   if IsWeirdBuffer()
      return ''
   endif

   return winwidth(0) >=# g:lightline_thin_width
    \ ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . &filetype : "\u0078 none")
    \ : (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() : "\u0078 ")
endfunction

" See: <https://gist.github.com/pocari/84c78efa38b5c2fc1f659d1aac3face8>
function! LightlineMode()
   return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

"" #### vim-easytags
"set tags=./tags;
"let g:easytags_dynamic_files = 2
"let g:easytags_resolve_links = 1
"let g:easytags_async = 1
"
"let g:easytags_include_members = 1
"let g:easytags_auto_highlight = 0
"
"" #### Tagbar
"let g:tagbar_left = 1
"let g:tagbar_width = 50
"let g:tagbar_zoomwidth = 105
"let g:tagbar_expand = 1
"let g:tagbar_iconchars = ['▸', '▾']

" #### vim-focus-autocmd
let g:focau = {}

" Need to figure out the Hyper.app codes for cursor-changing
"let g:focau.cursors = ['', '', '']

" 'clipboard' appears to be broken (see amerlyq/vim-focus-autocmd#4)
"let g:focau.widgets = ['clipboard', 'buffers', 'number']
let g:focau.widgets = []

" #### vim-move
" Use <C-j> and <C-k> in normal and visual mode to move lines around
let g:move_key_modifier = 'C'

" #### vim-hardtime
let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:hardtime_timeout = 2500
let g:hardtime_ignore_quickfix = 1
let g:hardtime_allow_different_key = 1

let g:list_of_insert_keys = []

let g:hardtime_ignore_buffer_patterns = [ "[denite]" ]

" #### pear-tree
let g:pear_tree_map_special_keys = v:false

let g:pear_tree_smart_openers = v:true
let g:pear_tree_smart_closers = v:true
let g:pear_tree_smart_backspace = v:true

" #### vim-gitgutter
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1

" #### split-term.vim
let g:disable_key_mappings = v:true
let g:split_term_default_shell = "/usr/local/bin/zsh"

" #### merlin
let g:merlin_completion_arg_type = "always"
let g:merlin_type_history_auto_open = 2

" #### echodoc.vim
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = "floating"

" #### vim-textobj-...
" this can (and maybe should?) be triggered per-filetype
augroup textobj | au!
   au VimEnter * call textobj#sentence#init()
            \ | call textobj#quote#init()
augroup END

" #### ghcid
" Use stack to find ghcid, as per:
"    <https://github.com/ndmitchell/ghcid/issues/209>
let g:ghcid_command = "stack exec ghcid --"


"let g:gundo_width = 25
"let g:gundo_preview_bottom = 1
"let g:gundo_help = 0
"let g:gundo_close_on_revert = 1
"
"let g:sparkupArgs = '--indent-spaces=3 --no-last-newline --post-tag-guides'
"
""let g:nerdtree_tabs_autofind=1 " This seems to fail. Some error about ‘dictionary: reveal.‘
"
"let g:tex_flavor = 'latex'

" filnxtToO → ilxstToOIF
" (Last `shm+=I` disables the :intro message.)
set shortmess-=f shm-=n shm+=s shm +=F shm+=I
