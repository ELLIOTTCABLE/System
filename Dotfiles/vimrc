set nomodeline nocompatible
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

runtime solarized.vimrc

set textwidth=100 cc=+1,+2,+3
set number ruler nowrap wrapmargin=3
set shiftround expandtab tabstop=8 softtabstop=3 shiftwidth=3
set nosmarttab noautoindent
set smartcase ignorecase

set cursorline
set listchars+=tab:\ ·

set hlsearch incsearch ignorecase smartcase gdefault

set scrolloff=3
set history=1000
set title

syntax on
filetype on
filetype plugin on
filetype indent off

set encoding=utf-8

set backspace=indent,eol,start

" Command-line tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.class,.svn

if has("mouse")
   set mouse=a

   if &term == 'screen'
      " tmux knows the extended mouse mode
      set ttymouse=xterm2
   endif

   if v:version >= 704 && &term =~ '^screen'
      " Odds are good that this is a modern tmux, so let's pick the best mouse-handling mode.
      set ttymouse=sgr
   endif

   " These break the Markdown plugin o_O
  "map <ScrollWheelUp> <C-Y>
  "map <ScrollWheelDown> <C-E>
endif

if executable("ag")
  "set grepprg=ag\ --nogroup\ --nocolor
   set grepprg=ag\ --vimgrep\ --nocolor
   let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

" toggles show marks plugin
fun! ToggleShowMarks()
   if exists('b:sm') && b:sm == 1
      let b:sm=0
      NoShowMarks!
      setl updatetime=4000
   else
      let b:sm=1
      setl updatetime=200
      DoShowMarks!
   endif
endfun

au VimEnter * call ToggleShowMarks()

au VimEnter * NERDTreeTabsToggle


" === Styles ===
" ... until https://github.com/altercation/vim-colors-solarized/pull/62
fun! FixSignColumn()
   highlight clear SignColumn
   highlight link SignColumn LineNr
endfun

call FixSignColumn()
au ColorScheme * call FixSignColumn()


" This toggles the hilighting of trailing-whitespace.
fun! ToggleExtraWhitespace()

   if exists('b:ews') && b:ews == 1
     "echom "Disabling trailing-whitespace hilighting in" bufnr('%') "..."
      let b:ews=0
      call HighlightExtraWhitespace()

     "echom "-- Removing ExtraWhitespace augroup"
      au!      ExtraWhitespace
      augroup! ExtraWhitespace

   else
     "echom "Enabling trailing-whitespace hilighting in" bufnr('%') "..."
      let b:ews=1
      call HighlightExtraWhitespace()

     "echom "-- Adding ExtraWhitespace augroup"
      augroup  ExtraWhitespace
         au!
         au BufEnter    * match ExtraWhitespace /\s\+$/
         au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
         au InsertLeave * match ExtraWhiteSpace /\s\+$/
      augroup END

      if mode() == "i" | do ExtraWhitespace InsertEnter | else | do ExtraWhitespace BufEnter | endif

   endif
endfun

" This adds (or removes) the actual hilighting to your ColourScheme. (It's must be re-called every
" time you toggle hilighting, or change your scheme.)
fun! HighlightExtraWhitespace()
   if exists('b:ews') && b:ews == 1
     "echom "-- Adding ExtraWhitespace hilighting"
      highlight ExtraWhitespace ctermbg=red guibg=red
   else
     "echom "-- Removing ExtraWhitespace hilighting"
      highlight clear ExtraWhitespace
   endif
endfun
au ColorScheme * call HighlightExtraWhitespace()

" (Uncomment the following line if you want trailing-whitespace hilighted by default!)
bufdo call ToggleExtraWhitespace() | au BufAdd * call ToggleExtraWhitespace()

" === Mappings ===
let mapleader = " "

" Thanks, Damian. http://ell.io/i6io1
nnoremap ; :

" Fuck '.
nnoremap ' `
nnoremap ` '

" These make movement commands “work” with `o`, such as `3o` to insert inject lines and switch to insert mode.
"nnoremap o o<Esc>S        " ... unfortunately, they break yanking.
"nnoremap O O<Esc>'[S

" See `:help Y`
map Y y$

nnoremap  <Leader>w <C-W>

noremap  <silent> <C-S>         :update<CR>
vnoremap <silent> <C-S>    <C-C>:update<CR>
inoremap <silent> <C-S>    <C-O>:update<CR>
noremap           <C-W>         :confirm quit<CR>
vnoremap          <C-W>    <C-C>:confirm quit<CR>
inoremap          <C-W>    <C-O>:confirm quit<CR>

noremap  <silent> <C-K>         :nohlsearch<CR>
vnoremap <silent> <C-K>    <C-C>:nohlsearch<CR>
inoremap <silent> <C-K>    <C-O>:nohlsearch<CR>


noremap  <silent> <F1>          :NERDTreeTabsToggle<Return>
inoremap <silent> <F1>     <C-O>:NERDTreeTabsToggle<Return>
vnoremap <silent> <F1>     <Esc>:NERDTreeTabsToggle<Return>
noremap  <silent> <F2>          :GundoToggle<Return>
inoremap <silent> <F2>     <C-O>:GundoToggle<Return>
vnoremap <silent> <F2>     <Esc>:GundoToggle<Return>
noremap  <silent> <F3>          :TagbarToggle<Return>
inoremap <silent> <F3>     <C-O>:TagbarToggle<Return>
vnoremap <silent> <F3>     <Esc>:TagbarToggle<Return>

noremap  <silent> <F8>          :set spell!<Return>
inoremap <silent> <F8>     <C-O>:set spell!<Return>
vnoremap <silent> <F8>     <Esc>:set spell!<Return>

" F11 to toggle hilighting extra whitespace
nmap <silent> <F10> :call ToggleExtraWhitespace()<cr>
imap <silent> <F10> <C-O><F10>

" F11 to toggle showing marks
nmap <silent> <F11> :call ToggleShowMarks()<cr>
imap <silent> <F11> <C-O><F11>

" F12 to toggle hilight, Shift-F12 to clear search register
nmap <silent> <F12> :silent set invhls<CR>
imap <silent> <F12> <C-O><F12>
map  <silent> <S-F12> :let @/ = @_<CR>
imap <silent> <S-F12> <C-O><S-F12>

autocmd BufLeave,FocusLost * silent! wall

" To fold by indentation in CoffeeScript files, but don't enable by default. (`zi` to enable)
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable

" I don't understand why this is necessary. I clearly don't understand vim's filetype recognition
" very well.
au BufRead,BufNewFile *.pegjs setfiletype pegjs

au FileType gitcommit set wrap tw=0

" gist-vim defaults
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

set undofile
set undolevels=10000

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup
set undodir=~/.vim/undo,\ .

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" === Plugins ===
call arpeggio#load()

let NERDChristmasTree = 1
let NERDTreeShowBookmarks = 1
let NERDTreeBookmarksFile = '.NERDTreeBookmarks'
let NERDTreeMouseMode = 2
let NERDTreeSortOrder = ['\/$', '\.h$', '*']
let NERDTreeWinPos = 'right'
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeWinSize = 25

let NERDBlockComIgnoreEmpty = 0
let NERDSpaceDelims = 1
let NERDCompactSexyComs = 1
let NERDDefaultNesting = 0

let g:CommandTMaxCachedDirectories = 0
let g:CommandTMaxHeight = 10
let g:CommandTMatchWindowReverse = 1
let g:CommandTScanDotDirectories = 1  " `:set wildignore` handles this better.

let g:clang_use_library = 1      " Use the (faster, but more fragile) libclang instead of executable
let g:clang_library_path = '/usr/local/lib'

let g:clang_auto_select = 1      " Automatically *select* first result, but don't insert
let g:clang_complete_auto = 1    " Automatically complete after ->, ., ::

let g:clang_clmplete_copen = 1   " Open quickfix on error
let g:clang_hl_errors = 1        " Hilights errors the same way clang does
let g:clang_periodic_quickfix = 1      " Periodically update the quickfix window automatically

let g:clang_snippets = 1         " Enable snippets (i.e. parentheses after completing function)
let g:clang_snippets_engine = 'clang_complete'
let g:clang_trailing_placeholder = 1   " Trailing completion *after* functions

"let g:clang_close_preview = 0    " Close the preview window after a completion is selected
"let g:clang_complete_macros = 0  " Complete preprocessor macros and constants
"let g:clang_complete_patterns = 0 " Complete code-patterns, loop structures, etc

"let g:CoffeeAutoTagIncludeVars=1

set omnifunc=syntaxcomplete#Complete
let g:tern_map_keys=1
let g:tern_show_argument_hints="on_hold"

let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

let g:gundo_width = 25
let g:gundo_preview_bottom = 1
let g:gundo_help = 0
let g:gundo_close_on_revert = 1

let g:sparkupArgs = '--indent-spaces=3 --no-last-newline --post-tag-guides'

let g:nerdtree_tabs_open_on_gui_startup=0
let g:nerdtree_tabs_smart_startup_focus=2
"let g:nerdtree_tabs_autofind=1 " This seems to fail. Some error about ‘dictionary: reveal.‘

let g:SuperTabDefaultCompletionType = "context"

call togglebg#map("<F5>")

" filnxtToO → ilmxstToOI
" (Last `shm+=I` disables the :intro message.)
set shortmess-=f shm+=m shm-=n shm+=s shm+=I
set showcmd
