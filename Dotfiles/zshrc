PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>"$HOME/Desktop/startlog.$$"
    setopt xtrace prompt_subst
fi

if [ -f "$HOME/.profile.local" ]; then source "$HOME/.profile.local"; fi

source "$HOME/.profile"

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}' '+r:|[._-]=** r:|=**' '+'
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original false
zstyle ':completion:*' prompt 'Corrections (%e):'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/Users/elliottcable/.zshrc'

# Lines configured by zsh-newuser-install
setopt AUTOCD BEEP EXTENDEDGLOB NOMATCH NOTIFY
# End of lines configured by zsh-newuser-install

# This is almost certainly a stupid thing to do, but I really like to be able
# to switch vi modes quickly.
KEYTIMEOUT=1


# ===========
# = History =
# ===========

# History should, uh, work
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=25000
setopt SHARE_HISTORY # Sexier history, srsly, why wouldn’t anybody want this?
#setopt APPEND_HISTORY     #
#setopt INC_APPEND_HISTORY # These are handled by SHARE_HISTORY
#setopt EXTENDED_HISTORY   #
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_SPACE # Start a line with a space to prevent saving it
setopt HIST_NO_STORE # Don’t store the `history` command itself


# ===========
# = Modules =
# ===========
# I shim `zgen` to be lazy-loadable.
zgen() {
   unset -f zgen
   local zgen_dir="$SYSTEM_REPO/Vendor/zgen"

   if [[ -r "$zgen_dir/zgen.zsh" ]]; then

      source "$zgen_dir/zgen.zsh" >/dev/null                                                     ;fi

   zgen "$@" }

ZGEN_RESET_ON_CHANGE=("${HOME}/.zshrc" "${HOME}/.profile" "${HOME}/.profile.local")

if ! source "$HOME/.zgen/init.zsh"; then
   printf %s\\n '-- `init.zsh` missing, re-generating with `Zgen`'

   # completions (from zsh-users and Homebrew)
   zgen load zsh-users/zsh-completions src
   zgen load /usr/local/share/zsh/site-functions

   # Steal omz's termsupport for Apple Terminal. (Hacky as fuck; will have to watch to see if this
   # changes.)
   zgen load robbyrussell/oh-my-zsh lib/functions
   zgen load robbyrussell/oh-my-zsh lib/termsupport

   zgen oh-my-zsh plugins/sudo
   zgen oh-my-zsh plugins/brew
   zgen oh-my-zsh plugins/vagrant
  #zgen oh-my-zsh plugins/chruby
  #zgen oh-my-zsh plugins/coffee          # Broken.
   zgen oh-my-zsh plugins/terminalapp
   zgen load mkwmms/zsh-osx
   zgen load felixr/docker-zsh-completion
  #zgen load akoenig/npm-run.plugin.zsh   # Needs `compdef`, idk right now. FIXME!

   zgen load Vifon/deer deer
  #zgen load b4b4r07/enhancd              # Looks incompatible with `k`:   <http://git.io/vCpUU>
   zgen load rimraf/k
  #zgen load tarruda/zsh-autosuggestions  # Also broken:                   <http://git.io/vCpUk>
   zgen load tarruda/zsh-autosuggestions

   whence terminal-notifier >/dev/null && zgen load marzocchi/zsh-notify

   # `fzf`'s “**blah”-completion behaviour, ⌘T, etc.
   if whence fzf >/dev/null; then
      zgen load junegunn/fzf shell/completion.zsh
      zgen load junegunn/fzf shell/key-bindings.zsh
   fi

   # zsh-syntax-highlighting must be loaded last!
   zgen load zsh-users/zsh-syntax-highlighting
   zgen load zsh-users/zsh-history-substring-search

   zgen save >/dev/null
fi


# ================
# = Key bindings =
# ================

bindkey           '' clear-screen
bindkey -M vicmd  '' clear-screen

# Link the ‘viins’ keymap to the ‘main’ keymap, and activate it
bindkey -A viins main

# Setup ⌃W to exit the shell
function close_tab { exit }
zle -N close_tab_widget close_tab
bindkey           '' close_tab_widget
bindkey -M vicmd  '' close_tab_widget

# ‘up/down-line-or-search’ only utilizes the first “word” of the current line;
# I much prefer it utilizing the entire contents of the line prior to the
# insertion point (the operation of ‘history-beginning-search-forward/
# backward’). Until this is fixed, we’ll disable multi–line editing.
#bindkey '\e[A' up-line-or-search
#bindkey '\e[B' down-line-or-search
# However, we still need SINGLE_LINE_ZLE to be unset, so RPROMPT and such work
unsetopt SINGLE_LINE_ZLE
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward

# Allow `!` in command-mode to open the current command-line in a full vim:
autoload edit-command-line && {
   zle -N edit-command-line
   bindkey -M vicmd ! edit-command-line
}


# ==========
# = Prompt =
# ==========

#RPS1="['%1v', '%2v', '%3v', '%4v', '%5v', '%6v', '%7v', '%8v', '%9v']" # debug

#      +-----------------------------+- Check return status, and (un-)set color
#      |            +----------------)- See if psvar[1] is empty (see below)
#      |            |                |
#      v            v       v        v
PS1="%(?|%2F|%1F)%1(V|%1v|%(#|#|>))%(?|%2f|%1f) "

# Forces *all* new line editors to start in vicmd mode instead of viins mode.
#function zle-line-init {
#  local STATUS=$?
#  zle -K vicmd
#  return $STATUS
#}
#zle -N   zle-line-init

function zle-keymap-select {
  local STATUS=$?
  # See the PS1 above; we set psvar[1] to be empty if the $KEYMAP is insert-mode,
  # and to : if it's been put into command-mode.
  psvar[1]="${${KEYMAP/vicmd/:}/(main|viins)/}"
  ( exit $STATUS ) # This may not seem to make sense, but it’s the only way to preserve the exit status
                   # (http://www.zsh.org/cgi-bin/mla/redirect?USERNUMBER=15796)
  zle reset-prompt
  psvar[1]=""
}
zle -N   zle-keymap-select

# ### Titlebar and tab titles
# (Requires the `termsupport` from OMZ.)
#export ZSH_THEME_TERM_TITLE_IDLE='' \
#       ZSH_THEME_TERM_TAB_TITLE_IDLE=''
export DISABLE_AUTO_TITLE='true'


# ==============================
# = Other module configuration =
# ==============================

# ### junegunn/fzf
# note, these apply to `fzf` in general, not just the zsh functionality; I'm not sure whether to
# re-locate some of this into the general `.profile`?
if whence -v fzf-completion >/dev/null; then
   export FZF_DEFAULT_COMMAND='ag --nocolor -l -g ""'
   export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

   export FZF_COMPLETION_TRIGGER=';'
   bindkey    '^I' fzf-completion
   bindkey -a ';'  fzf-completion # Currently broken: <https://github.com/junegunn/fzf/issues/478>
fi

# ### zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main cursor brackets root)

# ### zsh-history-substring-search/zsh-history-substring-search.zsh
setopt HIST_FIND_NO_DUPS # ???
zmodload zsh/terminfo
#bindkey "$terminfo[kcuu1]" history-substring-search-up
#bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up # 'cuz OS X. >,>
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

ZSH_HIGHLIGHT_STYLES[root]='bg=9'                  # Orange
if [ "$BACKGROUND" = dark ]; then
   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=15,bold' # Base 3
   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=14,bold' # Base 1
   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=12,bold' # Base 0
                                                      # Base 00, normal text
   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=10,bold' # Base 01
   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=8,bold'  # Base 03
   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'

   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=15,bg=0,bold'
   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=0,bold'
else
   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=8,bold'  # Base 03
   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=10,bold' # Base 01
   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=11,bold' # Base 00
                                                      # Base 0, normal text
   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=14,bold' # Base 1
   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=15,bold' # Base 3
   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'

   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=8,bg=7,bold'
   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=7,bold'
fi


# ### tarruda/zsh-autosuggestions
#zle-line-init() {
#    zle autosuggest-start
#}
#zle -N zle-line-init
#
#bindkey '^T' autosuggest-toggle
#bindkey -M viins '^f' vi-forward-word # Equivalent to `w` in command-mode

# ### b4b4r07/enhancd
#export ENHANCD_FILTER='fzf:peco'
#export ENHANCD_DIR="$HOME/.cache/enhancd"

# ### Vifon/deer
zle -N deer
bindkey -M vicmd 'K' deer
zstyle ':deer:' height 35


if [[ "$PROFILE_STARTUP" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
fi
