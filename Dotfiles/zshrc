#!/usr/bin/env zsh
PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
   # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
   PS4=$'%D{%M%S%.} %N:%i> '
   exec 3>&2 2>"$HOME/Desktop/startlog.$$"
   setopt xtrace prompt_subst
fi

if [[ "$DEBUG_PATH" == true ]]; then
   echo '~/.zshrc (before): $PATH = '
   echo $PATH | tr ':' "\n" | nl
fi



source "$HOME/.profile"

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}' '+r:|[._-]=** r:|=**' '+'
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original false
zstyle ':completion:*' prompt 'Corrections (%e):'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true

# Lines configured by zsh-newuser-install
setopt AUTOCD BEEP EXTENDEDGLOB NOMATCH NOTIFY
# End of lines configured by zsh-newuser-install

# This is almost certainly a stupid thing to do, but I really like to be able
# to switch vi modes quickly.
KEYTIMEOUT=1


# ===========
# = History =
# ===========

# History should, uh, work
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=25000
setopt SHARE_HISTORY       # Sexier history, srsly, why wouldn’t anybody want this?
#setopt APPEND_HISTORY     #
#setopt INC_APPEND_HISTORY # These are handled by SHARE_HISTORY
#setopt EXTENDED_HISTORY   #
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_SPACE   # Start a line with a space to prevent saving it
setopt HIST_NO_STORE       # Don’t store the `history` command itself


# ===========
# = Modules =
# ===========
while ! command -v sheldon 1>/dev/null; do
   printf "\e[31m%s\e[m — may I install it via Homebrew? " \
      "[sheldon] sheldon is missing"
   read -rq may_i\?
   if [ $may_i = n ]; then
      exit 1                                                                  ; fi

   printf \\n
   brew install sheldon
   sheldon lock
done

eval "$(sheldon source)"


# ================
# = Key bindings =
# ================

# Link the ‘viins’ keymap to the ‘main’ keymap, and activate it
bindkey -v

bindkey    '' clear-screen
bindkey -a '' clear-screen

# up/down arrows
# <https://unix.stackexchange.com/a/691482/12095>
for direction (up down) {
   autoload $direction-line-or-beginning-search
   zle -N $direction-line-or-beginning-search
   key=$terminfo[kcu$direction[1]1]
   for key ($key ${key/O/[})
      bindkey $key $direction-line-or-beginning-search
}

# Allow `!` in command-mode to open the current command-line in a full vim:
# TODO: Use VScode if within a VScode terminal
nvim-command-line () {
   local VISUAL='nvim'
   edit-command-line
}
autoload -Uz edit-command-line && {
   zle -N nvim-command-line
   bindkey -a ! nvim-command-line
}

# zsh-surround
autoload -Uz surround
zle -N delete-surround  surround
zle -N add-surround     surround
zle -N change-surround  surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a ys add-surround
bindkey -M visual S add-surround

# select-quoted
autoload -U select-quoted
zle      -N select-quoted
for m in visual viopp; do
   for c in {a,i}{\',\",\`}; do
      bindkey -M $m $c select-quoted
   done
done

# select-bracketed
autoload -Uz select-bracketed
zle -N select-bracketed
for m in visual viopp; do
   for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
      bindkey -M $m $c select-bracketed
   done
done
# here to fix syntax-highlighting of this file in VSCode: '

# copy-earlier-word
# <https://leahneukirchen.org/blog/archive/2013/03/10-fresh-zsh-tricks-you-may-not-know.html>
autoload -Uz copy-earlier-word && {
   zle -N copy-earlier-word
   bindkey -v '≤' copy-earlier-word # Alt-, on maccOS
}
bindkey -v '≥' insert-last-word # Alt-. on maccOS


# ==========
# = Prompt =
# ==========
zstyle :prompt:pure:prompt:success color green
PURE_CMD_MAX_EXEC_TIME='3'

# Forces *all* new line editors to start in vicmd mode instead of viins mode.
#function zle-line-init {
#  local STATUS=$?
#  zle -K vicmd
#  return $STATUS
#}
#zle -N   zle-line-init


# ### Terminal-cursor manipulation
# To match the terminal-cursor to the current vi-mode, we first need to ensure the cursor swaps
# every time the vi-mode swaps:
autoload -Uz add-zsh-hook add-zle-hook-widget
add-zle-hook-widget  line-init      set-vi-mode-terminal-cursor
add-zle-hook-widget  keymap-select  set-vi-mode-terminal-cursor

set-vi-mode-terminal-cursor () {
   case $KEYMAP in
      vicmd) echo -ne '\e[1 q';; # block cursor
      viins|main|*) echo -ne '\e[5 q';; # bar cursor
   esac
}

# ... then, we'll need to make zsh *reset* the cursor when invoking the actual command submitted.
# NOTE: I can't *query* the terminal's prior setting — if you want your terminal to default to a
# different cursor, you'll have to edit it *here*, as well as in your terminal settings!
add-zsh-hook         preexec        reset-vi-mode-terminal-cursor

reset-vi-mode-terminal-cursor () {
   echo -ne '\e[1 q'
}


# ### Titlebar and tab titles
# (Requires the `termsupport` from OMZ.)
#export ZSH_THEME_TERM_TITLE_IDLE='' \
#       ZSH_THEME_TERM_TAB_TITLE_IDLE=''
export DISABLE_AUTO_TITLE='true'


# ==============================
# = Other module configuration =
# ==============================

# ### url-quote-magic
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# ### junegunn/fzf
# NOTE: these apply to `fzf` in general, not just the zsh functionality; I'm not sure whether to
#       re-locate more of these into the general `.profile`
if whence -v fzf-completion >/dev/null; then
   export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
   export FZF_CTRL_T_OPTS="--select-1 --exit-0"
   export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden --bind '?:toggle-preview'"
   export FZF_TMUX=1

   fzf-direct-completion() {
      FZF_COMPLETION_TRIGGER= fzf-completion
   }; zle -N fzf-direct-completion

   fzf-history-widget-accept() {
      fzf-history-widget
      zle accept-line
   }; zle -N fzf-history-widget-accept

   export FZF_COMPLETION_TRIGGER=';'
   bindkey    '^I'   fzf-completion
   bindkey    '^T'  $fzf_default_completion
   bindkey -a ';'    fzf-direct-completion
   bindkey    '^X'   fzf-history-widget-accept
fi



#ZSH_HIGHLIGHT_STYLES[root]='bg=9'                  # Orange
#if [ "$BACKGROUND" = dark ]; then
#   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=15,bold' # Base 3
#   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=14,bold' # Base 1
#   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=12,bold' # Base 0
#                                                      # Base 00, normal text
#   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=10,bold' # Base 01
#   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=8,bold'  # Base 03
#   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'
#
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=15,bg=0,bold'
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=0,bold'
#else
#   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=8,bold'  # Base 03
#   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=10,bold' # Base 01
#   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=11,bold' # Base 00
#                                                      # Base 0, normal text
#   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=14,bold' # Base 1
#   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=15,bold' # Base 3
#   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'
#
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=8,bg=7,bold'
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=7,bold'
#fi


# ### tarruda/zsh-autosuggestions
ZSH_AUTOSUGGEST_USE_ASYNC=true

#bindkey '^T' autosuggest-toggle
bindkey -M viins '^f' vi-forward-word # Equivalent to `w` in command-mode


if [[ "$DEBUG_PATH" == true ]]; then
   echo '~/.zshrc (after): $PATH = '
   echo $PATH | tr ':' "\n" | nl
fi

if [[ "$PROFILE_STARTUP" == true ]]; then
   unsetopt xtrace
   exec 2>&3 3>&-
fi
