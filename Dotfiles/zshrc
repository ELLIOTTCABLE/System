PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>"$HOME/Desktop/startlog.$$"
    setopt xtrace prompt_subst
fi

if [ -f "$HOME/.profile.local" ]; then source "$HOME/.profile.local"; fi

source "$HOME/.profile"

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent ..
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}' '+r:|[._-]=** r:|=**' '+'
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original false
zstyle ':completion:*' prompt 'Corrections (%e):'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/Users/elliottcable/.zshrc'

# Lines configured by zsh-newuser-install
setopt AUTOCD BEEP EXTENDEDGLOB NOMATCH NOTIFY
# End of lines configured by zsh-newuser-install

# This is almost certainly a stupid thing to do, but I really like to be able
# to switch vi modes quickly.
KEYTIMEOUT=1


# ===========
# = History =
# ===========

# History should, uh, work
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=25000
setopt SHARE_HISTORY       # Sexier history, srsly, why wouldn’t anybody want this?
#setopt APPEND_HISTORY     #
#setopt INC_APPEND_HISTORY # These are handled by SHARE_HISTORY
#setopt EXTENDED_HISTORY   #
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_SPACE   # Start a line with a space to prevent saving it
setopt HIST_NO_STORE       # Don’t store the `history` command itself


# ===========
# = Modules =
# ===========
export ZPLUG_HOME="$HOME/.zsh/modules/zplug/zplug"

export ZPLUG_LOADFILE="$HOME/.zsh/packages.zsh"
export ZPLUG_REPOS="$HOME/.zsh/modules"

while [ ! -f "$ZPLUG_HOME/init.zsh" ]; do
   printf "\e[31m%s\e[m — may I install it to <\e[38;5;39m%s\e[m>? " \
      "!! zplug missing" "$ZPLUG_HOME"
   read -rq may_i\?
   if [ $may_i = n ]; then
      exit 1                                                                  ; fi

   printf \\n
   git clone https://github.com/zplug/zplug "$ZPLUG_HOME"
done

source "$ZPLUG_HOME/init.zsh"

if ! zplug check; then
   printf "\e[31m%s\e[m:\n" \
      "[zplug] zsh modules missing"
   zplug check --verbose
   printf "\e[31m%s\e[m ... may I install them to <\e[38;5;39m%s\e[m>? " \
      "[zplug]" "$ZPLUG_REPOS"
   read -rq may_i\?
   printf \\n

   if [ $may_i = y ]; then
      zplug install
   fi
fi

# completions (from zsh-users and Homebrew)
#zgen load zsh-users/zsh-completions
#zgen load /usr/local/share/zsh/site-functions

zplug load


# ================
# = Key bindings =
# ================

bindkey           '' clear-screen
bindkey -M vicmd  '' clear-screen

# Link the ‘viins’ keymap to the ‘main’ keymap, and activate it
bindkey -A viins main

# Setup ⌃W to exit the shell
function close_tab { exit }
zle -N close_tab_widget close_tab
bindkey           '' close_tab_widget
bindkey -M vicmd  '' close_tab_widget

# ‘up/down-line-or-search’ only utilizes the first “word” of the current line;
# I much prefer it utilizing the entire contents of the line prior to the
# insertion point (the operation of ‘history-beginning-search-forward/
# backward’). Until this is fixed, we’ll disable multi–line editing.
#bindkey '\e[A' up-line-or-search
#bindkey '\e[B' down-line-or-search
# However, we still need SINGLE_LINE_ZLE to be unset, so RPROMPT and such work
unsetopt SINGLE_LINE_ZLE
bindkey '\e[A' history-beginning-search-backward
bindkey '\e[B' history-beginning-search-forward

# Allow `!` in command-mode to open the current command-line in a full vim:
autoload edit-command-line && {
   zle -N edit-command-line
   bindkey -M vicmd ! edit-command-line
}


# ==========
# = Prompt =
# ==========

#POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="↱"
#POWERLEVEL9K_MULTILINE_SECOND_PROMPT_PREFIX="↳ "
 POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
#POWERLEVEL9K_COLOR_SCHEME='light'

# Curved segment-separators
POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR=$'\ue0b4'
POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR=$'\ue0b5'
POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR=$'\ue0b6'
POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR=$'\ue0b7'

# FIXME: Fuckin' icons — also broken
POWERLEVEL9K_HOME_ICON=$'\uf015'
POWERLEVEL9K_HOME_SUB_ICON=$'\uf015'

POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir dir_writable rbenv vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history command_execution_time time_joined vi_mode)

DEFAULT_USER='ec'

# FIXME: This appears to be broken?
POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_DELIMITER=""
POWERLEVEL9K_SHORTEN_STRATEGY='truncate_with_folder_marker'
POWERLEVEL9K_DIR_PATH_SEPARATOR=" $(print_icon 'LEFT_SUBSEGMENT_SEPARATOR') "

POWERLEVEL9K_VCS_SHOW_SUBMODULE_DIRTY=false

#POWERLEVEL9K_VI_INSERT_MODE_STRING=">"
#POWERLEVEL9K_VI_COMMAND_MODE_STRING=":"
POWERLEVEL9K_VI_MODE_INSERT_BACKGROUND='005'
POWERLEVEL9K_VI_MODE_INSERT_FOREGROUND='236'
POWERLEVEL9K_VI_MODE_NORMAL_BACKGROUND='245'
POWERLEVEL9K_VI_MODE_NORMAL_FOREGROUND='236'

POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=2

POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S \uf017  %d.%m.%y}"

# ==============================
# = Other module configuration =
# ==============================

# ### tarruda/zsh-autosuggestions
ZSH_AUTOSUGGEST_USE_ASYNC=true

#zle-line-init() {
#    zle autosuggest-start
#}
#zle -N zle-line-init

#bindkey '^T' autosuggest-toggle
bindkey -M viins '^f' vi-forward-word # Equivalent to `w` in command-mode


# ### junegunn/fzf
# note, these apply to `fzf` in general, not just the zsh functionality; I'm not sure whether to
# re-locate some of this into the general `.profile`?
if whence -v fzf-completion >/dev/null; then
   export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git --nocolor -l -g ""'
   export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
   export FZF_CTRL_T_OPTS="--select-1 --exit-0"
   export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden --bind '?:toggle-preview'"
   export FZF_TMUX=1

   fzf-direct-completion() {
     FZF_COMPLETION_TRIGGER= fzf-completion
  }; zle -N fzf-direct-completion

   fzf-history-widget-accept() {
      fzf-history-widget
      zle accept-line
   }; zle -N fzf-history-widget-accept

   export FZF_COMPLETION_TRIGGER=';'
   bindkey    '^I'   fzf-completion
   bindkey    '^T'  $fzf_default_completion
   bindkey -a ';'    fzf-direct-completion
   bindkey    '^X'   fzf-history-widget-accept
fi


# ### zsh-history-substring-search/zsh-history-substring-search.zsh
#setopt HIST_FIND_NO_DUPS # ???
#zmodload zsh/terminfo
##bindkey "$terminfo[kcuu1]" history-substring-search-up
##bindkey "$terminfo[kcud1]" history-substring-search-down
#bindkey '^[[A' history-substring-search-up # 'cuz OS X. >,>
#bindkey '^[[B' history-substring-search-down
#bindkey -M vicmd 'k' history-substring-search-up
#bindkey -M vicmd 'j' history-substring-search-down

#ZSH_HIGHLIGHT_STYLES[root]='bg=9'                  # Orange
#if [ "$BACKGROUND" = dark ]; then
#   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=15,bold' # Base 3
#   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=14,bold' # Base 1
#   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=12,bold' # Base 0
#                                                      # Base 00, normal text
#   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=10,bold' # Base 01
#   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=8,bold'  # Base 03
#   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'
#
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=15,bg=0,bold'
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=0,bold'
#else
#   ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=8,bold'  # Base 03
#   ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=10,bold' # Base 01
#   ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=11,bold' # Base 00
#                                                      # Base 0, normal text
#   ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=14,bold' # Base 1
#   ZSH_HIGHLIGHT_STYLES[bracket-level-5]='fg=15,bold' # Base 3
#   ZSH_HIGHLIGHT_STYLES[cursor]='fg=15'
#
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='fg=8,bg=7,bold'
#   HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='fg=13,bg=7,bold'
#fi

# ### b4b4r07/enhancd
#export ENHANCD_FILTER='fzf:peco'
#export ENHANCD_DIR="$HOME/.cache/enhancd"

# ### Vifon/deer
autoload -U deer
zle -N deer
bindkey -M vicmd 'K' deer
zstyle ':deer:' height 22


if [[ "$PROFILE_STARTUP" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
fi
