# code: language=ansible

 - name: Test SSH connection to remote host
   ansible.builtin.ping:
   ignore_unreachable: true
   ignore_errors: true
   register: initial_pingtest
   tags:
    - always
    - ping-gather

 - ansible.builtin.debug:
      verbosity: 1
      var: initial_pingtest
   tags:
    - always
    - ping-gather

 - name: Handle connection failure
   when: initial_pingtest.unreachable is defined or initial_pingtest.failed
   tags:
    - always
    - connection-fallback
   block:

    - name: Wait for either SSH port (configured or default) to become available
      ansible.builtin.include_tasks:
         file: 1_wait_for_ssh_port.yaml
         apply:
            tags:
             - always
             - connection-fallback

    - name: "Test for (configured) SSH user availability w/ builtin.ping: ({{ ansible_user }}@{{ ansible_port }})"
      ansible.builtin.ping:
      ignore_unreachable: true
      ignore_errors: true
      register: known_port_pingtest

    - name: Fallback to root SSH user
      when: known_port_pingtest.unreachable is defined or known_port_pingtest.failed
      ansible.builtin.include_tasks:
         file: 3_fallback_to_root_ssh_user.yaml
         apply:
            tags:
             - always
             - connection-fallback

    - ansible.builtin.meta: clear_host_errors

 - name: Finally gather facts
   ansible.builtin.setup:
   tags:
    - always
    - ping-gather

 - ansible.builtin.debug:
      verbosity: 2
      var: ansible_become_method
   tags:
    - admin-user-setup

 - name: Ensure become is available
   tags:
    - admin-user-setup
   block:

    - name: Test become
      become: true
      ansible.builtin.command: id -u
      register: become_test
      changed_when: false
      tags:
       - admin-user-setup

   rescue:

    - name: Fallback to su become_mode if sudo is not installed
      ansible.builtin.set_fact:
         ansible_become_method: ansible.builtin.su
      tags:
       - admin-user-setup

 - name: Update apt cache
   # These tasks are from HTSALSWA's "requirements" role:
   # <https://github.com/moltenbit/How-To-Secure-A-Linux-Server-With-Ansible/blob/37315ab3/roles/requirements/tasks/main.yml>
   become: true
   ansible.builtin.apt:
      update_cache: true
      upgrade: false
   tags:
    - admin-user-setup

 - name: Install sudo
   become: true
   ansible.builtin.apt:
      name: sudo
   tags:
    - admin-user-setup

 - name: Create security groups
   become: true
   ansible.builtin.group:
      name: "{{ item }}"
   with_items:
    - sshusers
    - suusers
    - sudousers
   tags:
    - admin-user-setup

 - name: Create admin user
   become: true
   ansible.builtin.user:
      name: "{{ user_name }}"
      password: "{{ user_pw | password_hash('sha512') }}"
      groups: "sshusers, sudousers, suusers"
      shell: /bin/bash
   tags:
    - admin-user-setup

 - name: Limit sudo to sudousers groups
   become: true
   ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^%sudousers'
      line: '%sudousers   ALL=(ALL:ALL) ALL'
   tags:
    - admin-user-setup

 - name: Passwordless sudo for new user
   become: true
   ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^{{ user_name }}'
      line: '{{ user_name }} ALL=(ALL) NOPASSWD: ALL'
      state: present
      mode: "0440"
      create: true
      validate: 'visudo -cf %s'
   tags:
    - admin-user-setup

 - name: Add authorized key for new user
   become: true
   ansible.posix.authorized_key:
      user: "{{ user_name }}"
      key: "{{ lookup('file', sshpub_location) }}"
   tags:
    - admin-user-setup

 - ansible.builtin.debug:
      verbosity: 2
      var: ansible_become_method
   tags:
    - admin-user-setup

 - name: Restore original become method
   when: ansible_become_method is defined and not (ansible_become_method == 'ansible.builtin.sudo')
   ansible.builtin.set_fact:
      ansible_become_method: ansible.builtin.sudo
   tags:
    - admin-user-setup

 - ansible.builtin.debug:
      verbosity: 2
      var: ansible_user_to_restore
   tags:
    - always
    - connection-fallback

 - when: ansible_user_to_restore is defined
   tags:
    - always
    - connection-fallback
   block:

    - name: Reauthenticate as normal admin user
      ansible.builtin.set_fact:
         ansible_user: "{{ ansible_user_to_restore }}"
         ansible_ssh_pass: "" # unset password

    - name: Reset connection
      ansible.builtin.include_tasks:
         file: reset_connection.yaml
         apply:
            tags:
             - always
             - connection-fallback

 - name: Print 'after' values for user IDs
   ansible.builtin.debug:
      verbosity: 1
      msg: |-
         ansible_user: {{ ansible_user | d('unset') }};
         remote_user: {{ remote_user | d('unset') }}
   tags:
    - always
    - ping-gather
    - connection-fallback

 - name: Limit who can use su
   register: sustd
   ansible.builtin.shell: |
      sudo dpkg-statoverride --update --add root suusers 4750 /bin/su
   failed_when:
    - sustd.rc != 0
    - '"exist" not in sustd.stderr' # this has to be changed: unsure how to skip the "already exist" error in other languages
   tags:
    - admin-user-setup
